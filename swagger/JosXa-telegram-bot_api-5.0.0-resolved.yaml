---
openapi: 3.0.0
info:
  title: Telegram Bot API
  description: Auto-generated OpenAPI schema
  version: 5.0.0
externalDocs:
  description: The Bot API is an HTTP-based interface created for developers keen on building bots for Telegram.
  url: https://core.telegram.org/bots/api
servers:
- url: https://api.telegram.org/bot{token}
  variables:
    token:
      description: Each bot is given a unique authentication token when it is created.
      default: 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11
paths:
  /getUpdates:
    post:
      description: Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getupdates
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_1'
          application/json:
            schema:
              $ref: '#/components/schemas/body_2'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setWebhook:
    post:
      description: |-
        Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.

        If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setwebhook
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_3'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deleteWebhook:
    post:
      description: Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#deletewebhook
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_4'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_5'
          application/json:
            schema:
              $ref: '#/components/schemas/body_6'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getWebhookInfo:
    post:
      description: Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getwebhookinfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getMe:
    post:
      description: A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getme
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logOut:
    post:
      description: Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
      externalDocs:
        url: https://core.telegram.org/bots/api/#logout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /close:
    post:
      description: Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
      externalDocs:
        url: https://core.telegram.org/bots/api/#close
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendMessage:
    post:
      description: Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendmessage
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_7'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_8'
          application/json:
            schema:
              $ref: '#/components/schemas/body_9'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forwardMessage:
    post:
      description: Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#forwardmessage
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_10'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_11'
          application/json:
            schema:
              $ref: '#/components/schemas/body_12'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /copyMessage:
    post:
      description: Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#copymessage
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_13'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_14'
          application/json:
            schema:
              $ref: '#/components/schemas/body_15'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendPhoto:
    post:
      description: Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendphoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_16'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendAudio:
    post:
      description: |-
        Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.

        For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendaudio
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_17'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendDocument:
    post:
      description: Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
      externalDocs:
        url: https://core.telegram.org/bots/api/#senddocument
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_18'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendVideo:
    post:
      description: Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendvideo
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_19'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendAnimation:
    post:
      description: Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendanimation
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_20'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendVoice:
    post:
      description: Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendvoice
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_21'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendVideoNote:
    post:
      description: As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendvideonote
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_22'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendMediaGroup:
    post:
      description: Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendmediagroup
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_23'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendLocation:
    post:
      description: Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendlocation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_24'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_25'
          application/json:
            schema:
              $ref: '#/components/schemas/body_26'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /editMessageLiveLocation:
    post:
      description: Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#editmessagelivelocation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_27'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_28'
          application/json:
            schema:
              $ref: '#/components/schemas/body_29'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stopMessageLiveLocation:
    post:
      description: Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#stopmessagelivelocation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_30'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_31'
          application/json:
            schema:
              $ref: '#/components/schemas/body_32'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendVenue:
    post:
      description: Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendvenue
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_33'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_34'
          application/json:
            schema:
              $ref: '#/components/schemas/body_35'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendContact:
    post:
      description: Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendcontact
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_36'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_37'
          application/json:
            schema:
              $ref: '#/components/schemas/body_38'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendPoll:
    post:
      description: Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendpoll
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_39'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_40'
          application/json:
            schema:
              $ref: '#/components/schemas/body_41'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendDice:
    post:
      description: Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#senddice
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_42'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_43'
          application/json:
            schema:
              $ref: '#/components/schemas/body_44'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendChatAction:
    post:
      description: |-
        Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.

        Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\_photo*. The user will see a “sending photo” status for the bot.

        We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendchataction
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_45'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_46'
          application/json:
            schema:
              $ref: '#/components/schemas/body_47'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getUserProfilePhotos:
    post:
      description: Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getuserprofilephotos
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_48'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_49'
          application/json:
            schema:
              $ref: '#/components/schemas/body_50'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getFile:
    post:
      description: Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getfile
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_51'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_52'
          application/json:
            schema:
              $ref: '#/components/schemas/body_53'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kickChatMember:
    post:
      description: Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#kickchatmember
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_54'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_55'
          application/json:
            schema:
              $ref: '#/components/schemas/body_56'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /unbanChatMember:
    post:
      description: Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#unbanchatmember
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_57'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_58'
          application/json:
            schema:
              $ref: '#/components/schemas/body_59'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restrictChatMember:
    post:
      description: Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#restrictchatmember
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_60'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_61'
          application/json:
            schema:
              $ref: '#/components/schemas/body_62'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /promoteChatMember:
    post:
      description: Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#promotechatmember
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_63'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_64'
          application/json:
            schema:
              $ref: '#/components/schemas/body_65'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setChatAdministratorCustomTitle:
    post:
      description: Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setchatadministratorcustomtitle
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_66'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_67'
          application/json:
            schema:
              $ref: '#/components/schemas/body_68'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setChatPermissions:
    post:
      description: Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setchatpermissions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_69'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_70'
          application/json:
            schema:
              $ref: '#/components/schemas/body_71'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exportChatInviteLink:
    post:
      description: Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#exportchatinvitelink
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_72'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_73'
          application/json:
            schema:
              $ref: '#/components/schemas/body_74'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setChatPhoto:
    post:
      description: Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setchatphoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_75'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deleteChatPhoto:
    post:
      description: Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#deletechatphoto
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_76'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_77'
          application/json:
            schema:
              $ref: '#/components/schemas/body_78'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setChatTitle:
    post:
      description: Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setchattitle
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_79'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_80'
          application/json:
            schema:
              $ref: '#/components/schemas/body_81'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setChatDescription:
    post:
      description: Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setchatdescription
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_82'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_83'
          application/json:
            schema:
              $ref: '#/components/schemas/body_84'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pinChatMessage:
    post:
      description: Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#pinchatmessage
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_85'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_86'
          application/json:
            schema:
              $ref: '#/components/schemas/body_87'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /unpinChatMessage:
    post:
      description: Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#unpinchatmessage
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_88'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_89'
          application/json:
            schema:
              $ref: '#/components/schemas/body_90'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /unpinAllChatMessages:
    post:
      description: Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#unpinallchatmessages
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_91'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_92'
          application/json:
            schema:
              $ref: '#/components/schemas/body_93'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /leaveChat:
    post:
      description: Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#leavechat
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_94'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_95'
          application/json:
            schema:
              $ref: '#/components/schemas/body_96'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getChat:
    post:
      description: Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getchat
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_97'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_98'
          application/json:
            schema:
              $ref: '#/components/schemas/body_99'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getChatAdministrators:
    post:
      description: Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getchatadministrators
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_100'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_101'
          application/json:
            schema:
              $ref: '#/components/schemas/body_102'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getChatMembersCount:
    post:
      description: Use this method to get the number of members in a chat. Returns *Int* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getchatmemberscount
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_103'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_104'
          application/json:
            schema:
              $ref: '#/components/schemas/body_105'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getChatMember:
    post:
      description: Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getchatmember
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_106'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_107'
          application/json:
            schema:
              $ref: '#/components/schemas/body_108'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setChatStickerSet:
    post:
      description: Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setchatstickerset
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_109'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_110'
          application/json:
            schema:
              $ref: '#/components/schemas/body_111'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deleteChatStickerSet:
    post:
      description: Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#deletechatstickerset
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_112'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_113'
          application/json:
            schema:
              $ref: '#/components/schemas/body_114'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /answerCallbackQuery:
    post:
      description: |-
        Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.

        Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
      externalDocs:
        url: https://core.telegram.org/bots/api/#answercallbackquery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_115'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_116'
          application/json:
            schema:
              $ref: '#/components/schemas/body_117'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setMyCommands:
    post:
      description: Use this method to change the list of the bot's commands. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setmycommands
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_118'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_119'
          application/json:
            schema:
              $ref: '#/components/schemas/body_120'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getMyCommands:
    post:
      description: Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getmycommands
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /editMessageText:
    post:
      description: Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#editmessagetext
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_121'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_122'
          application/json:
            schema:
              $ref: '#/components/schemas/body_123'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /editMessageCaption:
    post:
      description: Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#editmessagecaption
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_124'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_125'
          application/json:
            schema:
              $ref: '#/components/schemas/body_126'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /editMessageMedia:
    post:
      description: Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#editmessagemedia
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_127'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /editMessageReplyMarkup:
    post:
      description: Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#editmessagereplymarkup
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_128'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_129'
          application/json:
            schema:
              $ref: '#/components/schemas/body_130'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stopPoll:
    post:
      description: Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#stoppoll
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_131'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_132'
          application/json:
            schema:
              $ref: '#/components/schemas/body_133'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_16'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deleteMessage:
    post:
      description: "Use this method to delete a message, including service messages, with the following limitations:  \n\\- A message can only be deleted if it was sent less than 48 hours ago.  \n\\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.  \n\\- Bots can delete outgoing messages in private chats, groups, and supergroups.  \n\\- Bots can delete incoming messages in private chats.  \n\\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.  \n\\- If the bot is an administrator of a group, it can delete any message there.  \n\\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.  \nReturns *True* on success."
      externalDocs:
        url: https://core.telegram.org/bots/api/#deletemessage
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_134'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_135'
          application/json:
            schema:
              $ref: '#/components/schemas/body_136'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendSticker:
    post:
      description: Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendsticker
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_137'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getStickerSet:
    post:
      description: Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getstickerset
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_138'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_139'
          application/json:
            schema:
              $ref: '#/components/schemas/body_140'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_17'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /uploadStickerFile:
    post:
      description: Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#uploadstickerfile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_141'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /createNewStickerSet:
    post:
      description: Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#createnewstickerset
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_142'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /addStickerToSet:
    post:
      description: Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#addstickertoset
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_143'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setStickerPositionInSet:
    post:
      description: Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setstickerpositioninset
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_144'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_145'
          application/json:
            schema:
              $ref: '#/components/schemas/body_146'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deleteStickerFromSet:
    post:
      description: Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#deletestickerfromset
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_147'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_148'
          application/json:
            schema:
              $ref: '#/components/schemas/body_149'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setStickerSetThumb:
    post:
      description: Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setstickersetthumb
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_150'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /answerInlineQuery:
    post:
      description: "Use this method to send answers to an inline query. On success, *True* is returned.  \nNo more than **50** results per query are allowed."
      externalDocs:
        url: https://core.telegram.org/bots/api/#answerinlinequery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_151'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_152'
          application/json:
            schema:
              $ref: '#/components/schemas/body_153'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendInvoice:
    post:
      description: Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendinvoice
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_154'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_155'
          application/json:
            schema:
              $ref: '#/components/schemas/body_156'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /answerShippingQuery:
    post:
      description: If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#answershippingquery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_157'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_158'
          application/json:
            schema:
              $ref: '#/components/schemas/body_159'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /answerPreCheckoutQuery:
    post:
      description: Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
      externalDocs:
        url: https://core.telegram.org/bots/api/#answerprecheckoutquery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_160'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_161'
          application/json:
            schema:
              $ref: '#/components/schemas/body_162'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setPassportDataErrors:
    post:
      description: |-
        Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.

        Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setpassportdataerrors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_163'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_164'
          application/json:
            schema:
              $ref: '#/components/schemas/body_165'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sendGame:
    post:
      description: Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sendgame
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_166'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_167'
          application/json:
            schema:
              $ref: '#/components/schemas/body_168'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /setGameScore:
    post:
      description: Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
      externalDocs:
        url: https://core.telegram.org/bots/api/#setgamescore
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_169'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_170'
          application/json:
            schema:
              $ref: '#/components/schemas/body_171'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getGameHighScores:
    post:
      description: |-
        Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.

        This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
      externalDocs:
        url: https://core.telegram.org/bots/api/#getgamehighscores
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_172'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_173'
          application/json:
            schema:
              $ref: '#/components/schemas/body_174'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      required:
      - description
      - error_code
      - ok
      type: object
      properties:
        ok:
          type: boolean
          default: false
        error_code:
          type: integer
        description:
          type: string
        parameters:
          $ref: '#/components/schemas/ResponseParameters'
    Update:
      required:
      - update_id
      type: object
      properties:
        update_id:
          type: integer
          description: The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
        message:
          $ref: '#/components/schemas/Message'
        edited_message:
          $ref: '#/components/schemas/Message'
        channel_post:
          $ref: '#/components/schemas/Message'
        edited_channel_post:
          $ref: '#/components/schemas/Message'
        inline_query:
          $ref: '#/components/schemas/InlineQuery'
        chosen_inline_result:
          $ref: '#/components/schemas/ChosenInlineResult'
        callback_query:
          $ref: '#/components/schemas/CallbackQuery'
        shipping_query:
          $ref: '#/components/schemas/ShippingQuery'
        pre_checkout_query:
          $ref: '#/components/schemas/PreCheckoutQuery'
        poll:
          $ref: '#/components/schemas/Poll'
        poll_answer:
          $ref: '#/components/schemas/PollAnswer'
      description: "This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.  \nAt most **one** of the optional parameters can be present in any given update."
      externalDocs:
        url: https://core.telegram.org/bots/api/#update
    WebhookInfo:
      required:
      - has_custom_certificate
      - pending_update_count
      - url
      type: object
      properties:
        url:
          type: string
          description: Webhook URL, may be empty if webhook is not set up
        has_custom_certificate:
          type: boolean
          description: True, if a custom certificate was provided for webhook certificate checks
        pending_update_count:
          type: integer
          description: Number of updates awaiting delivery
        ip_address:
          type: string
          description: '*Optional*. Currently used webhook IP address'
        last_error_date:
          type: integer
          description: '*Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook'
        last_error_message:
          type: string
          description: '*Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook'
        max_connections:
          type: integer
          description: '*Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery'
        allowed_updates:
          type: array
          description: '*Optional*. A list of update types the bot is subscribed to. Defaults to all update types'
          items:
            type: string
      description: Contains information about the current status of a webhook.
      externalDocs:
        url: https://core.telegram.org/bots/api/#webhookinfo
    User:
      required:
      - first_name
      - id
      - is_bot
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this user or bot
        is_bot:
          type: boolean
          description: True, if this user is a bot
        first_name:
          type: string
          description: User's or bot's first name
        last_name:
          type: string
          description: '*Optional*. User''s or bot''s last name'
        username:
          type: string
          description: '*Optional*. User''s or bot''s username'
        language_code:
          type: string
          description: '*Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user''s language'
        can_join_groups:
          type: boolean
          description: '*Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).'
        can_read_all_group_messages:
          type: boolean
          description: '*Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).'
        supports_inline_queries:
          type: boolean
          description: '*Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).'
      description: This object represents a Telegram user or bot.
      externalDocs:
        url: https://core.telegram.org/bots/api/#user
    Chat:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
        type:
          type: string
          description: Type of chat, can be either “private”, “group”, “supergroup” or “channel”
          enum:
          - private
          - group
          - supergroup
          - channel
        title:
          type: string
          description: '*Optional*. Title, for supergroups, channels and group chats'
        username:
          type: string
          description: '*Optional*. Username, for private chats, supergroups and channels if available'
        first_name:
          type: string
          description: '*Optional*. First name of the other party in a private chat'
        last_name:
          type: string
          description: '*Optional*. Last name of the other party in a private chat'
        photo:
          $ref: '#/components/schemas/ChatPhoto'
        bio:
          type: string
          description: '*Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).'
        description:
          type: string
          description: '*Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).'
        invite_link:
          type: string
          description: '*Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).'
        pinned_message:
          $ref: '#/components/schemas/Message'
        permissions:
          $ref: '#/components/schemas/ChatPermissions'
        slow_mode_delay:
          type: integer
          description: '*Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).'
        sticker_set_name:
          type: string
          description: '*Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).'
        can_set_sticker_set:
          type: boolean
          description: '*Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).'
        linked_chat_id:
          type: integer
          description: '*Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).'
        location:
          $ref: '#/components/schemas/ChatLocation'
      description: This object represents a chat.
      externalDocs:
        url: https://core.telegram.org/bots/api/#chat
    Message:
      required:
      - chat
      - date
      - message_id
      type: object
      properties:
        message_id:
          type: integer
          description: Unique message identifier inside this chat
        from:
          $ref: '#/components/schemas/User'
        sender_chat:
          $ref: '#/components/schemas/Chat'
        date:
          type: integer
          description: Date the message was sent in Unix time
        chat:
          $ref: '#/components/schemas/Chat'
        forward_from:
          $ref: '#/components/schemas/User'
        forward_from_chat:
          $ref: '#/components/schemas/Chat'
        forward_from_message_id:
          type: integer
          description: '*Optional*. For messages forwarded from channels, identifier of the original message in the channel'
        forward_signature:
          type: string
          description: '*Optional*. For messages forwarded from channels, signature of the post author if present'
        forward_sender_name:
          type: string
          description: '*Optional*. Sender''s name for messages forwarded from users who disallow adding a link to their account in forwarded messages'
        forward_date:
          type: integer
          description: '*Optional*. For forwarded messages, date the original message was sent in Unix time'
        reply_to_message:
          $ref: '#/components/schemas/Message'
        via_bot:
          $ref: '#/components/schemas/User'
        edit_date:
          type: integer
          description: '*Optional*. Date the message was last edited in Unix time'
        media_group_id:
          type: string
          description: '*Optional*. The unique identifier of a media message group this message belongs to'
        author_signature:
          type: string
          description: '*Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator'
        text:
          type: string
          description: '*Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters'
        entities:
          type: array
          description: '*Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text'
          items:
            $ref: '#/components/schemas/MessageEntity'
        animation:
          $ref: '#/components/schemas/Animation'
        audio:
          $ref: '#/components/schemas/Audio'
        document:
          $ref: '#/components/schemas/Document'
        photo:
          type: array
          description: '*Optional*. Message is a photo, available sizes of the photo'
          items:
            $ref: '#/components/schemas/PhotoSize'
        sticker:
          $ref: '#/components/schemas/Sticker'
        video:
          $ref: '#/components/schemas/Video'
        video_note:
          $ref: '#/components/schemas/VideoNote'
        voice:
          $ref: '#/components/schemas/Voice'
        caption:
          type: string
          description: '*Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters'
        caption_entities:
          type: array
          description: '*Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption'
          items:
            $ref: '#/components/schemas/MessageEntity'
        contact:
          $ref: '#/components/schemas/Contact'
        dice:
          $ref: '#/components/schemas/Dice'
        game:
          $ref: '#/components/schemas/Game'
        poll:
          $ref: '#/components/schemas/Poll'
        venue:
          $ref: '#/components/schemas/Venue'
        location:
          $ref: '#/components/schemas/Location'
        new_chat_members:
          type: array
          description: '*Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)'
          items:
            $ref: '#/components/schemas/User'
        left_chat_member:
          $ref: '#/components/schemas/User'
        new_chat_title:
          type: string
          description: '*Optional*. A chat title was changed to this value'
        new_chat_photo:
          type: array
          description: '*Optional*. A chat photo was change to this value'
          items:
            $ref: '#/components/schemas/PhotoSize'
        delete_chat_photo:
          type: boolean
          description: '*Optional*. Service message: the chat photo was deleted'
        group_chat_created:
          type: boolean
          description: '*Optional*. Service message: the group has been created'
        supergroup_chat_created:
          type: boolean
          description: '*Optional*. Service message: the supergroup has been created. This field can''t be received in a message coming through updates, because bot can''t be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.'
        channel_chat_created:
          type: boolean
          description: '*Optional*. Service message: the channel has been created. This field can''t be received in a message coming through updates, because bot can''t be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.'
        migrate_to_chat_id:
          type: integer
          description: '*Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.'
        migrate_from_chat_id:
          type: integer
          description: '*Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.'
        pinned_message:
          $ref: '#/components/schemas/Message'
        invoice:
          $ref: '#/components/schemas/Invoice'
        successful_payment:
          $ref: '#/components/schemas/SuccessfulPayment'
        connected_website:
          type: string
          description: '*Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)'
        passport_data:
          $ref: '#/components/schemas/PassportData'
        proximity_alert_triggered:
          $ref: '#/components/schemas/ProximityAlertTriggered'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
      description: This object represents a message.
      externalDocs:
        url: https://core.telegram.org/bots/api/#message
    MessageId:
      required:
      - message_id
      type: object
      properties:
        message_id:
          type: integer
          description: Unique message identifier
      description: This object represents a unique message identifier.
      externalDocs:
        url: https://core.telegram.org/bots/api/#messageid
    MessageEntity:
      required:
      - length
      - offset
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
          enum:
          - mention
          - hashtag
          - cashtag
          - bot_command
          - url
          - email
          - phone_number
          - bold
          - italic
          - underline
          - strikethrough
          - code
          - pre
          - text_link
          - text_mention
        offset:
          type: integer
          description: Offset in UTF-16 code units to the start of the entity
        length:
          type: integer
          description: Length of the entity in UTF-16 code units
        url:
          type: string
          description: '*Optional*. For “text\_link” only, url that will be opened after user taps on the text'
        user:
          $ref: '#/components/schemas/User'
        language:
          type: string
          description: '*Optional*. For “pre” only, the programming language of the entity text'
      description: This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
      externalDocs:
        url: https://core.telegram.org/bots/api/#messageentity
    PhotoSize:
      required:
      - file_id
      - file_unique_id
      - height
      - width
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        width:
          type: integer
          description: Photo width
        height:
          type: integer
          description: Photo height
        file_size:
          type: integer
          description: '*Optional*. File size'
      description: This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
      externalDocs:
        url: https://core.telegram.org/bots/api/#photosize
    Animation:
      required:
      - duration
      - file_id
      - file_unique_id
      - height
      - width
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        width:
          type: integer
          description: Video width as defined by sender
        height:
          type: integer
          description: Video height as defined by sender
        duration:
          type: integer
          description: Duration of the video in seconds as defined by sender
        thumb:
          $ref: '#/components/schemas/PhotoSize'
        file_name:
          type: string
          description: '*Optional*. Original animation filename as defined by sender'
        mime_type:
          type: string
          description: '*Optional*. MIME type of the file as defined by sender'
        file_size:
          type: integer
          description: '*Optional*. File size'
      description: This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
      externalDocs:
        url: https://core.telegram.org/bots/api/#animation
    Audio:
      required:
      - duration
      - file_id
      - file_unique_id
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        duration:
          type: integer
          description: Duration of the audio in seconds as defined by sender
        performer:
          type: string
          description: '*Optional*. Performer of the audio as defined by sender or by audio tags'
        title:
          type: string
          description: '*Optional*. Title of the audio as defined by sender or by audio tags'
        file_name:
          type: string
          description: '*Optional*. Original filename as defined by sender'
        mime_type:
          type: string
          description: '*Optional*. MIME type of the file as defined by sender'
        file_size:
          type: integer
          description: '*Optional*. File size'
        thumb:
          $ref: '#/components/schemas/PhotoSize'
      description: This object represents an audio file to be treated as music by the Telegram clients.
      externalDocs:
        url: https://core.telegram.org/bots/api/#audio
    Document:
      required:
      - file_id
      - file_unique_id
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        thumb:
          $ref: '#/components/schemas/PhotoSize'
        file_name:
          type: string
          description: '*Optional*. Original filename as defined by sender'
        mime_type:
          type: string
          description: '*Optional*. MIME type of the file as defined by sender'
        file_size:
          type: integer
          description: '*Optional*. File size'
      description: This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
      externalDocs:
        url: https://core.telegram.org/bots/api/#document
    Video:
      required:
      - duration
      - file_id
      - file_unique_id
      - height
      - width
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        width:
          type: integer
          description: Video width as defined by sender
        height:
          type: integer
          description: Video height as defined by sender
        duration:
          type: integer
          description: Duration of the video in seconds as defined by sender
        thumb:
          $ref: '#/components/schemas/PhotoSize'
        file_name:
          type: string
          description: '*Optional*. Original filename as defined by sender'
        mime_type:
          type: string
          description: '*Optional*. Mime type of a file as defined by sender'
        file_size:
          type: integer
          description: '*Optional*. File size'
      description: This object represents a video file.
      externalDocs:
        url: https://core.telegram.org/bots/api/#video
    VideoNote:
      required:
      - duration
      - file_id
      - file_unique_id
      - length
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        length:
          type: integer
          description: Video width and height (diameter of the video message) as defined by sender
        duration:
          type: integer
          description: Duration of the video in seconds as defined by sender
        thumb:
          $ref: '#/components/schemas/PhotoSize'
        file_size:
          type: integer
          description: '*Optional*. File size'
      description: This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
      externalDocs:
        url: https://core.telegram.org/bots/api/#videonote
    Voice:
      required:
      - duration
      - file_id
      - file_unique_id
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        duration:
          type: integer
          description: Duration of the audio in seconds as defined by sender
        mime_type:
          type: string
          description: '*Optional*. MIME type of the file as defined by sender'
        file_size:
          type: integer
          description: '*Optional*. File size'
      description: This object represents a voice note.
      externalDocs:
        url: https://core.telegram.org/bots/api/#voice
    Contact:
      required:
      - first_name
      - phone_number
      type: object
      properties:
        phone_number:
          type: string
          description: Contact's phone number
        first_name:
          type: string
          description: Contact's first name
        last_name:
          type: string
          description: '*Optional*. Contact''s last name'
        user_id:
          type: integer
          description: '*Optional*. Contact''s user identifier in Telegram'
        vcard:
          type: string
          description: '*Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)'
      description: This object represents a phone contact.
      externalDocs:
        url: https://core.telegram.org/bots/api/#contact
    Dice:
      required:
      - emoji
      - value
      type: object
      properties:
        emoji:
          type: string
          description: Emoji on which the dice throw animation is based
        value:
          type: integer
          description: Value of the dice, 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />” base emoji, 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />” base emoji, 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />” base emoji
      description: This object represents an animated emoji that displays a random value.
      externalDocs:
        url: https://core.telegram.org/bots/api/#dice
    PollOption:
      required:
      - text
      - voter_count
      type: object
      properties:
        text:
          type: string
          description: Option text, 1-100 characters
        voter_count:
          type: integer
          description: Number of users that voted for this option
      description: This object contains information about one answer option in a poll.
      externalDocs:
        url: https://core.telegram.org/bots/api/#polloption
    PollAnswer:
      required:
      - option_ids
      - poll_id
      - user
      type: object
      properties:
        poll_id:
          type: string
          description: Unique poll identifier
        user:
          $ref: '#/components/schemas/User'
        option_ids:
          type: array
          description: 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
          items:
            type: integer
      description: This object represents an answer of a user in a non-anonymous poll.
      externalDocs:
        url: https://core.telegram.org/bots/api/#pollanswer
    Poll:
      required:
      - allows_multiple_answers
      - id
      - is_anonymous
      - is_closed
      - options
      - question
      - total_voter_count
      - type
      type: object
      properties:
        id:
          type: string
          description: Unique poll identifier
        question:
          type: string
          description: Poll question, 1-255 characters
        options:
          type: array
          description: List of poll options
          items:
            $ref: '#/components/schemas/PollOption'
        total_voter_count:
          type: integer
          description: Total number of users that voted in the poll
        is_closed:
          type: boolean
          description: True, if the poll is closed
        is_anonymous:
          type: boolean
          description: True, if the poll is anonymous
        type:
          type: string
          description: Poll type, currently can be “regular” or “quiz”
        allows_multiple_answers:
          type: boolean
          description: True, if the poll allows multiple answers
        correct_option_id:
          type: integer
          description: '*Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.'
        explanation:
          type: string
          description: '*Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters'
        explanation_entities:
          type: array
          description: '*Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        open_period:
          type: integer
          description: '*Optional*. Amount of time in seconds the poll will be active after creation'
        close_date:
          type: integer
          description: '*Optional*. Point in time (Unix timestamp) when the poll will be automatically closed'
      description: This object contains information about a poll.
      externalDocs:
        url: https://core.telegram.org/bots/api/#poll
    Location:
      required:
      - latitude
      - longitude
      type: object
      properties:
        longitude:
          type: number
          description: Longitude as defined by sender
        latitude:
          type: number
          description: Latitude as defined by sender
        horizontal_accuracy:
          type: number
          description: '*Optional*. The radius of uncertainty for the location, measured in meters; 0-1500'
        live_period:
          type: integer
          description: '*Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.'
        heading:
          type: integer
          description: '*Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.'
        proximity_alert_radius:
          type: integer
          description: '*Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.'
      description: This object represents a point on the map.
      externalDocs:
        url: https://core.telegram.org/bots/api/#location
    Venue:
      required:
      - address
      - location
      - title
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
        title:
          type: string
          description: Name of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: '*Optional*. Foursquare identifier of the venue'
        foursquare_type:
          type: string
          description: '*Optional*. Foursquare type of the venue. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)'
        google_place_id:
          type: string
          description: '*Optional*. Google Places identifier of the venue'
        google_place_type:
          type: string
          description: '*Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)'
      description: This object represents a venue.
      externalDocs:
        url: https://core.telegram.org/bots/api/#venue
    ProximityAlertTriggered:
      required:
      - distance
      - traveler
      - watcher
      type: object
      properties:
        traveler:
          $ref: '#/components/schemas/User'
        watcher:
          $ref: '#/components/schemas/User'
        distance:
          type: integer
          description: The distance between the users
      description: This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
      externalDocs:
        url: https://core.telegram.org/bots/api/#proximityalerttriggered
    UserProfilePhotos:
      required:
      - photos
      - total_count
      type: object
      properties:
        total_count:
          type: integer
          description: Total number of profile pictures the target user has
        photos:
          type: array
          description: Requested profile pictures (in up to 4 sizes each)
          items:
            type: array
            items:
              $ref: '#/components/schemas/PhotoSize'
      description: This object represent a user's profile pictures.
      externalDocs:
        url: https://core.telegram.org/bots/api/#userprofilephotos
    File:
      required:
      - file_id
      - file_unique_id
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        file_size:
          type: integer
          description: '*Optional*. File size, if known'
        file_path:
          type: string
          description: '*Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.'
      description: |-
        This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).

        Maximum file size to download is 20 MB
      externalDocs:
        url: https://core.telegram.org/bots/api/#file
    ReplyKeyboardMarkup:
      required:
      - keyboard
      type: object
      properties:
        keyboard:
          type: array
          description: Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
          items:
            type: array
            items:
              $ref: '#/components/schemas/KeyboardButton'
        resize_keyboard:
          type: boolean
          description: '*Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app''s standard keyboard.'
          default: false
        one_time_keyboard:
          type: boolean
          description: '*Optional*. Requests clients to hide the keyboard as soon as it''s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.'
          default: false
        selective:
          type: boolean
          description: "*Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.  \n\n*Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard."
      description: This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
      externalDocs:
        url: https://core.telegram.org/bots/api/#replykeyboardmarkup
    KeyboardButton:
      required:
      - text
      type: object
      properties:
        text:
          type: string
          description: Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
        request_contact:
          type: boolean
          description: '*Optional*. If *True*, the user''s phone number will be sent as a contact when the button is pressed. Available in private chats only'
        request_location:
          type: boolean
          description: '*Optional*. If *True*, the user''s current location will be sent when the button is pressed. Available in private chats only'
        request_poll:
          $ref: '#/components/schemas/KeyboardButtonPollType'
      description: This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\_contact*, *request\_location*, and *request\_poll* are mutually exclusive.
      externalDocs:
        url: https://core.telegram.org/bots/api/#keyboardbutton
    KeyboardButtonPollType:
      type: object
      properties:
        type:
          type: string
          description: '*Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.'
      description: This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
      externalDocs:
        url: https://core.telegram.org/bots/api/#keyboardbuttonpolltype
    ReplyKeyboardRemove:
      required:
      - remove_keyboard
      type: object
      properties:
        remove_keyboard:
          type: boolean
          description: Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\_time\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
        selective:
          type: boolean
          description: "*Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.  \n\n*Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet."
      description: Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
      externalDocs:
        url: https://core.telegram.org/bots/api/#replykeyboardremove
    InlineKeyboardMarkup:
      required:
      - inline_keyboard
      type: object
      properties:
        inline_keyboard:
          type: array
          description: Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
          items:
            type: array
            items:
              $ref: '#/components/schemas/InlineKeyboardButton'
      description: This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinekeyboardmarkup
    InlineKeyboardButton:
      required:
      - text
      type: object
      properties:
        text:
          type: string
          description: Label text on the button
        url:
          type: string
          description: '*Optional*. HTTP or tg:// url to be opened when button is pressed'
        login_url:
          $ref: '#/components/schemas/LoginUrl'
        callback_data:
          type: string
          description: '*Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes'
        switch_inline_query:
          type: string
          description: "*Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.  \n\n**Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen."
        switch_inline_query_current_chat:
          type: string
          description: "*Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.  \n\nThis offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options."
        callback_game:
          $ref: '#/components/schemas/CallbackGame'
        pay:
          type: boolean
          description: "*Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).  \n\n**NOTE:** This type of button **must** always be the first button in the first row."
      description: This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinekeyboardbutton
    LoginUrl:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  \n\n**NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization)."
        forward_text:
          type: string
          description: '*Optional*. New text of the button in forwarded messages.'
        bot_username:
          type: string
          description: '*Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot''s username will be assumed. The *url*''s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.'
        request_write_access:
          type: boolean
          description: '*Optional*. Pass True to request the permission for your bot to send messages to the user.'
      description: |-
        This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:

        Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).

        Sample bot: [@discussbot](https://t.me/discussbot)
      externalDocs:
        url: https://core.telegram.org/bots/api/#loginurl
    CallbackQuery:
      required:
      - chat_instance
      - from
      - id
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for this query
        from:
          $ref: '#/components/schemas/User'
        message:
          $ref: '#/components/schemas/Message'
        inline_message_id:
          type: string
          description: '*Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.'
        chat_instance:
          type: string
          description: Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
        data:
          type: string
          description: '*Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.'
        game_short_name:
          type: string
          description: '*Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game'
      description: This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\_message\_id* will be present. Exactly one of the fields *data* or *game\_short\_name* will be present.
      externalDocs:
        url: https://core.telegram.org/bots/api/#callbackquery
    ForceReply:
      required:
      - force_reply
      type: object
      properties:
        force_reply:
          type: boolean
          description: Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
        selective:
          type: boolean
          description: '*Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot''s message is a reply (has *reply\_to\_message\_id*), sender of the original message.'
      description: Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
      externalDocs:
        url: https://core.telegram.org/bots/api/#forcereply
    ChatPhoto:
      required:
      - big_file_id
      - big_file_unique_id
      - small_file_id
      - small_file_unique_id
      type: object
      properties:
        small_file_id:
          type: string
          description: File identifier of small (160x160) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
        small_file_unique_id:
          type: string
          description: Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        big_file_id:
          type: string
          description: File identifier of big (640x640) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
        big_file_unique_id:
          type: string
          description: Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
      description: This object represents a chat photo.
      externalDocs:
        url: https://core.telegram.org/bots/api/#chatphoto
    ChatMember:
      required:
      - status
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        status:
          type: string
          description: The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
          enum:
          - creator
          - administrator
          - member
          - restricted
          - left
          - kicked
        custom_title:
          type: string
          description: '*Optional*. Owner and administrators only. Custom title for this user'
        is_anonymous:
          type: boolean
          description: '*Optional*. Owner and administrators only. True, if the user''s presence in the chat is hidden'
        can_be_edited:
          type: boolean
          description: '*Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user'
        can_post_messages:
          type: boolean
          description: '*Optional*. Administrators only. True, if the administrator can post in the channel; channels only'
        can_edit_messages:
          type: boolean
          description: '*Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only'
        can_delete_messages:
          type: boolean
          description: '*Optional*. Administrators only. True, if the administrator can delete messages of other users'
        can_restrict_members:
          type: boolean
          description: '*Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members'
        can_promote_members:
          type: boolean
          description: '*Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)'
        can_change_info:
          type: boolean
          description: '*Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings'
        can_invite_users:
          type: boolean
          description: '*Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat'
        can_pin_messages:
          type: boolean
          description: '*Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only'
        is_member:
          type: boolean
          description: '*Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request'
        can_send_messages:
          type: boolean
          description: '*Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues'
        can_send_media_messages:
          type: boolean
          description: '*Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes'
        can_send_polls:
          type: boolean
          description: '*Optional*. Restricted only. True, if the user is allowed to send polls'
        can_send_other_messages:
          type: boolean
          description: '*Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots'
        can_add_web_page_previews:
          type: boolean
          description: '*Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages'
        until_date:
          type: integer
          description: '*Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time'
      description: This object contains information about one member of a chat.
      externalDocs:
        url: https://core.telegram.org/bots/api/#chatmember
    ChatPermissions:
      type: object
      properties:
        can_send_messages:
          type: boolean
          description: '*Optional*. True, if the user is allowed to send text messages, contacts, locations and venues'
        can_send_media_messages:
          type: boolean
          description: '*Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\_send\_messages'
        can_send_polls:
          type: boolean
          description: '*Optional*. True, if the user is allowed to send polls, implies can\_send\_messages'
        can_send_other_messages:
          type: boolean
          description: '*Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\_send\_media\_messages'
        can_add_web_page_previews:
          type: boolean
          description: '*Optional*. True, if the user is allowed to add web page previews to their messages, implies can\_send\_media\_messages'
        can_change_info:
          type: boolean
          description: '*Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups'
        can_invite_users:
          type: boolean
          description: '*Optional*. True, if the user is allowed to invite new users to the chat'
        can_pin_messages:
          type: boolean
          description: '*Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups'
      description: Describes actions that a non-administrator user is allowed to take in a chat.
      externalDocs:
        url: https://core.telegram.org/bots/api/#chatpermissions
    ChatLocation:
      required:
      - address
      - location
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
        address:
          type: string
          description: Location address; 1-64 characters, as defined by the chat owner
      description: Represents a location to which a chat is connected.
      externalDocs:
        url: https://core.telegram.org/bots/api/#chatlocation
    BotCommand:
      required:
      - command
      - description
      type: object
      properties:
        command:
          type: string
          description: Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
        description:
          type: string
          description: Description of the command, 3-256 characters.
      description: This object represents a bot command.
      externalDocs:
        url: https://core.telegram.org/bots/api/#botcommand
    ResponseParameters:
      type: object
      properties:
        migrate_to_chat_id:
          type: integer
          description: '*Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.'
        retry_after:
          type: integer
          description: '*Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated'
      description: Contains information about why a request was unsuccessful.
      externalDocs:
        url: https://core.telegram.org/bots/api/#responseparameters
    InputMedia:
      description: This object represents the content of a media message to be sent. It should be one of
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputmedia
      anyOf:
      - $ref: '#/components/schemas/InputMediaAnimation'
      - $ref: '#/components/schemas/InputMediaDocument'
      - $ref: '#/components/schemas/InputMediaAudio'
      - $ref: '#/components/schemas/InputMediaPhoto'
      - $ref: '#/components/schemas/InputMediaVideo'
    InputMediaPhoto:
      required:
      - media
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *photo*
        media:
          type: string
          description: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
        caption:
          type: string
          description: '*Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
      description: Represents a photo to be sent.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputmediaphoto
    InputMediaVideo:
      required:
      - media
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *video*
        media:
          type: string
          description: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
        thumb:
          description: '*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail''s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can''t be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)'
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: '*Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        width:
          type: integer
          description: '*Optional*. Video width'
        height:
          type: integer
          description: '*Optional*. Video height'
        duration:
          type: integer
          description: '*Optional*. Video duration'
        supports_streaming:
          type: boolean
          description: '*Optional*. Pass *True*, if the uploaded video is suitable for streaming'
      description: Represents a video to be sent.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputmediavideo
    InputMediaAnimation:
      required:
      - media
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *animation*
        media:
          type: string
          description: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
        thumb:
          description: '*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail''s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can''t be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)'
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: '*Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        width:
          type: integer
          description: '*Optional*. Animation width'
        height:
          type: integer
          description: '*Optional*. Animation height'
        duration:
          type: integer
          description: '*Optional*. Animation duration'
      description: Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputmediaanimation
    InputMediaAudio:
      required:
      - media
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *audio*
        media:
          type: string
          description: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
        thumb:
          description: '*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail''s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can''t be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)'
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: '*Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        duration:
          type: integer
          description: '*Optional*. Duration of the audio in seconds'
        performer:
          type: string
          description: '*Optional*. Performer of the audio'
        title:
          type: string
          description: '*Optional*. Title of the audio'
      description: Represents an audio file to be treated as music to be sent.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputmediaaudio
    InputMediaDocument:
      required:
      - media
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *document*
        media:
          type: string
          description: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
        thumb:
          description: '*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail''s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can''t be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)'
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: '*Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_content_type_detection:
          type: boolean
          description: '*Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.'
      description: Represents a general file to be sent.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputmediadocument
    InputFile:
      description: This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputfile
    Sticker:
      required:
      - file_id
      - file_unique_id
      - height
      - is_animated
      - width
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        width:
          type: integer
          description: Sticker width
        height:
          type: integer
          description: Sticker height
        is_animated:
          type: boolean
          description: '*True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)'
        thumb:
          $ref: '#/components/schemas/PhotoSize'
        emoji:
          type: string
          description: '*Optional*. Emoji associated with the sticker'
        set_name:
          type: string
          description: '*Optional*. Name of the sticker set to which the sticker belongs'
        mask_position:
          $ref: '#/components/schemas/MaskPosition'
        file_size:
          type: integer
          description: '*Optional*. File size'
      description: This object represents a sticker.
      externalDocs:
        url: https://core.telegram.org/bots/api/#sticker
    StickerSet:
      required:
      - contains_masks
      - is_animated
      - name
      - stickers
      - title
      type: object
      properties:
        name:
          type: string
          description: Sticker set name
        title:
          type: string
          description: Sticker set title
        is_animated:
          type: boolean
          description: '*True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)'
        contains_masks:
          type: boolean
          description: '*True*, if the sticker set contains masks'
        stickers:
          type: array
          description: List of all set stickers
          items:
            $ref: '#/components/schemas/Sticker'
        thumb:
          $ref: '#/components/schemas/PhotoSize'
      description: This object represents a sticker set.
      externalDocs:
        url: https://core.telegram.org/bots/api/#stickerset
    MaskPosition:
      required:
      - point
      - scale
      - x_shift
      - y_shift
      type: object
      properties:
        point:
          type: string
          description: The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
          enum:
          - forehead
          - eyes
          - mouth
          - chin
        x_shift:
          type: number
          description: Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
        y_shift:
          type: number
          description: Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
        scale:
          type: number
          description: Mask scaling coefficient. For example, 2.0 means double size.
      description: This object describes the position on faces where a mask should be placed by default.
      externalDocs:
        url: https://core.telegram.org/bots/api/#maskposition
    InlineQuery:
      required:
      - from
      - id
      - offset
      - query
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for this query
        from:
          $ref: '#/components/schemas/User'
        location:
          $ref: '#/components/schemas/Location'
        query:
          type: string
          description: Text of the query (up to 256 characters)
        offset:
          type: string
          description: Offset of the results to be returned, can be controlled by the bot
      description: This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequery
    InlineQueryResult:
      description: 'This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:'
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresult
      anyOf:
      - $ref: '#/components/schemas/InlineQueryResultCachedAudio'
      - $ref: '#/components/schemas/InlineQueryResultCachedDocument'
      - $ref: '#/components/schemas/InlineQueryResultCachedGif'
      - $ref: '#/components/schemas/InlineQueryResultCachedMpeg4Gif'
      - $ref: '#/components/schemas/InlineQueryResultCachedPhoto'
      - $ref: '#/components/schemas/InlineQueryResultCachedSticker'
      - $ref: '#/components/schemas/InlineQueryResultCachedVideo'
      - $ref: '#/components/schemas/InlineQueryResultCachedVoice'
      - $ref: '#/components/schemas/InlineQueryResultArticle'
      - $ref: '#/components/schemas/InlineQueryResultAudio'
      - $ref: '#/components/schemas/InlineQueryResultContact'
      - $ref: '#/components/schemas/InlineQueryResultGame'
      - $ref: '#/components/schemas/InlineQueryResultDocument'
      - $ref: '#/components/schemas/InlineQueryResultGif'
      - $ref: '#/components/schemas/InlineQueryResultLocation'
      - $ref: '#/components/schemas/InlineQueryResultMpeg4Gif'
      - $ref: '#/components/schemas/InlineQueryResultPhoto'
      - $ref: '#/components/schemas/InlineQueryResultVenue'
      - $ref: '#/components/schemas/InlineQueryResultVideo'
      - $ref: '#/components/schemas/InlineQueryResultVoice'
    InlineQueryResultArticle:
      required:
      - id
      - input_message_content
      - title
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *article*
        id:
          type: string
          description: Unique identifier for this result, 1-64 Bytes
        title:
          type: string
          description: Title of the result
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        url:
          type: string
          description: '*Optional*. URL of the result'
        hide_url:
          type: boolean
          description: '*Optional*. Pass *True*, if you don''t want the URL to be shown in the message'
        description:
          type: string
          description: '*Optional*. Short description of the result'
        thumb_url:
          type: string
          description: '*Optional*. Url of the thumbnail for the result'
        thumb_width:
          type: integer
          description: '*Optional*. Thumbnail width'
        thumb_height:
          type: integer
          description: '*Optional*. Thumbnail height'
      description: Represents a link to an article or web page.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultarticle
    InlineQueryResultPhoto:
      required:
      - id
      - photo_url
      - thumb_url
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *photo*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        photo_url:
          type: string
          description: A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB
        thumb_url:
          type: string
          description: URL of the thumbnail for the photo
        photo_width:
          type: integer
          description: '*Optional*. Width of the photo'
        photo_height:
          type: integer
          description: '*Optional*. Height of the photo'
        title:
          type: string
          description: '*Optional*. Title for the result'
        description:
          type: string
          description: '*Optional*. Short description of the result'
        caption:
          type: string
          description: '*Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultphoto
    InlineQueryResultGif:
      required:
      - gif_url
      - id
      - thumb_url
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *gif*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        gif_url:
          type: string
          description: A valid URL for the GIF file. File size must not exceed 1MB
        gif_width:
          type: integer
          description: '*Optional*. Width of the GIF'
        gif_height:
          type: integer
          description: '*Optional*. Height of the GIF'
        gif_duration:
          type: integer
          description: '*Optional*. Duration of the GIF'
        thumb_url:
          type: string
          description: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
        thumb_mime_type:
          type: string
          description: '*Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”'
          default: image/jpeg
          enum:
          - image/jpeg
          - image/gif
          - video/mp4
        title:
          type: string
          description: '*Optional*. Title for the result'
        caption:
          type: string
          description: '*Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultgif
    InlineQueryResultMpeg4Gif:
      required:
      - id
      - mpeg4_url
      - thumb_url
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *mpeg4\_gif*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        mpeg4_url:
          type: string
          description: A valid URL for the MP4 file. File size must not exceed 1MB
        mpeg4_width:
          type: integer
          description: '*Optional*. Video width'
        mpeg4_height:
          type: integer
          description: '*Optional*. Video height'
        mpeg4_duration:
          type: integer
          description: '*Optional*. Video duration'
        thumb_url:
          type: string
          description: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
        thumb_mime_type:
          type: string
          description: '*Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”'
          default: image/jpeg
          enum:
          - image/jpeg
          - image/gif
          - video/mp4
        title:
          type: string
          description: '*Optional*. Title for the result'
        caption:
          type: string
          description: '*Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultmpeg4gif
    InlineQueryResultVideo:
      required:
      - id
      - mime_type
      - thumb_url
      - title
      - type
      - video_url
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *video*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        video_url:
          type: string
          description: A valid URL for the embedded video player or video file
        mime_type:
          type: string
          description: Mime type of the content of video url, “text/html” or “video/mp4”
        thumb_url:
          type: string
          description: URL of the thumbnail (jpeg only) for the video
        title:
          type: string
          description: Title for the result
        caption:
          type: string
          description: '*Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        video_width:
          type: integer
          description: '*Optional*. Video width'
        video_height:
          type: integer
          description: '*Optional*. Video height'
        video_duration:
          type: integer
          description: '*Optional*. Video duration in seconds'
        description:
          type: string
          description: '*Optional*. Short description of the result'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: |-
        Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.

        If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\_message\_content*.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultvideo
    InlineQueryResultAudio:
      required:
      - audio_url
      - id
      - title
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *audio*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        audio_url:
          type: string
          description: A valid URL for the audio file
        title:
          type: string
          description: Title
        caption:
          type: string
          description: '*Optional*. Caption, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        performer:
          type: string
          description: '*Optional*. Performer'
        audio_duration:
          type: integer
          description: '*Optional*. Audio duration in seconds'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultaudio
    InlineQueryResultVoice:
      required:
      - id
      - title
      - type
      - voice_url
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *voice*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        voice_url:
          type: string
          description: A valid URL for the voice recording
        title:
          type: string
          description: Recording title
        caption:
          type: string
          description: '*Optional*. Caption, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        voice_duration:
          type: integer
          description: '*Optional*. Recording duration in seconds'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the the voice message.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultvoice
    InlineQueryResultDocument:
      required:
      - document_url
      - id
      - mime_type
      - title
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *document*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        title:
          type: string
          description: Title for the result
        caption:
          type: string
          description: '*Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        document_url:
          type: string
          description: A valid URL for the file
        mime_type:
          type: string
          description: Mime type of the content of the file, either “application/pdf” or “application/zip”
          enum:
          - application/pdf
          - application/zip
        description:
          type: string
          description: '*Optional*. Short description of the result'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
        thumb_url:
          type: string
          description: '*Optional*. URL of the thumbnail (jpeg only) for the file'
        thumb_width:
          type: integer
          description: '*Optional*. Thumbnail width'
        thumb_height:
          type: integer
          description: '*Optional*. Thumbnail height'
      description: Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultdocument
    InlineQueryResultLocation:
      required:
      - id
      - latitude
      - longitude
      - title
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *location*
        id:
          type: string
          description: Unique identifier for this result, 1-64 Bytes
        latitude:
          type: number
          description: Location latitude in degrees
        longitude:
          type: number
          description: Location longitude in degrees
        title:
          type: string
          description: Location title
        horizontal_accuracy:
          type: number
          description: '*Optional*. The radius of uncertainty for the location, measured in meters; 0-1500'
        live_period:
          type: integer
          description: '*Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.'
        heading:
          type: integer
          description: '*Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.'
        proximity_alert_radius:
          type: integer
          description: '*Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
        thumb_url:
          type: string
          description: '*Optional*. Url of the thumbnail for the result'
        thumb_width:
          type: integer
          description: '*Optional*. Thumbnail width'
        thumb_height:
          type: integer
          description: '*Optional*. Thumbnail height'
      description: Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the location.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultlocation
    InlineQueryResultVenue:
      required:
      - address
      - id
      - latitude
      - longitude
      - title
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *venue*
        id:
          type: string
          description: Unique identifier for this result, 1-64 Bytes
        latitude:
          type: number
          description: Latitude of the venue location in degrees
        longitude:
          type: number
          description: Longitude of the venue location in degrees
        title:
          type: string
          description: Title of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: '*Optional*. Foursquare identifier of the venue if known'
        foursquare_type:
          type: string
          description: '*Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)'
        google_place_id:
          type: string
          description: '*Optional*. Google Places identifier of the venue'
        google_place_type:
          type: string
          description: '*Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
        thumb_url:
          type: string
          description: '*Optional*. Url of the thumbnail for the result'
        thumb_width:
          type: integer
          description: '*Optional*. Thumbnail width'
        thumb_height:
          type: integer
          description: '*Optional*. Thumbnail height'
      description: Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the venue.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultvenue
    InlineQueryResultContact:
      required:
      - first_name
      - id
      - phone_number
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *contact*
        id:
          type: string
          description: Unique identifier for this result, 1-64 Bytes
        phone_number:
          type: string
          description: Contact's phone number
        first_name:
          type: string
          description: Contact's first name
        last_name:
          type: string
          description: '*Optional*. Contact''s last name'
        vcard:
          type: string
          description: '*Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
        thumb_url:
          type: string
          description: '*Optional*. Url of the thumbnail for the result'
        thumb_width:
          type: integer
          description: '*Optional*. Thumbnail width'
        thumb_height:
          type: integer
          description: '*Optional*. Thumbnail height'
      description: Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the contact.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcontact
    InlineQueryResultGame:
      required:
      - game_short_name
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *game*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        game_short_name:
          type: string
          description: Short name of the game
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
      description: Represents a [Game](https://core.telegram.org/bots/api/#games).
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultgame
    InlineQueryResultCachedPhoto:
      required:
      - id
      - photo_file_id
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *photo*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        photo_file_id:
          type: string
          description: A valid file identifier of the photo
        title:
          type: string
          description: '*Optional*. Title for the result'
        description:
          type: string
          description: '*Optional*. Short description of the result'
        caption:
          type: string
          description: '*Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedphoto
    InlineQueryResultCachedGif:
      required:
      - gif_file_id
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *gif*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        gif_file_id:
          type: string
          description: A valid file identifier for the GIF file
        title:
          type: string
          description: '*Optional*. Title for the result'
        caption:
          type: string
          description: '*Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with specified content instead of the animation.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedgif
    InlineQueryResultCachedMpeg4Gif:
      required:
      - id
      - mpeg4_file_id
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *mpeg4\_gif*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        mpeg4_file_id:
          type: string
          description: A valid file identifier for the MP4 file
        title:
          type: string
          description: '*Optional*. Title for the result'
        caption:
          type: string
          description: '*Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedmpeg4gif
    InlineQueryResultCachedSticker:
      required:
      - id
      - sticker_file_id
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *sticker*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        sticker_file_id:
          type: string
          description: A valid file identifier of the sticker
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the sticker.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedsticker
    InlineQueryResultCachedDocument:
      required:
      - document_file_id
      - id
      - title
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *document*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        title:
          type: string
          description: Title for the result
        document_file_id:
          type: string
          description: A valid file identifier for the file
        description:
          type: string
          description: '*Optional*. Short description of the result'
        caption:
          type: string
          description: '*Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcacheddocument
    InlineQueryResultCachedVideo:
      required:
      - id
      - title
      - type
      - video_file_id
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *video*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        video_file_id:
          type: string
          description: A valid file identifier for the video file
        title:
          type: string
          description: Title for the result
        description:
          type: string
          description: '*Optional*. Short description of the result'
        caption:
          type: string
          description: '*Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedvideo
    InlineQueryResultCachedVoice:
      required:
      - id
      - title
      - type
      - voice_file_id
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *voice*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        voice_file_id:
          type: string
          description: A valid file identifier for the voice message
        title:
          type: string
          description: Voice message title
        caption:
          type: string
          description: '*Optional*. Caption, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the voice message.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedvoice
    InlineQueryResultCachedAudio:
      required:
      - audio_file_id
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the result, must be *audio*
        id:
          type: string
          description: Unique identifier for this result, 1-64 bytes
        audio_file_id:
          type: string
          description: A valid file identifier for the audio file
        caption:
          type: string
          description: '*Optional*. Caption, 0-1024 characters after entities parsing'
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        caption_entities:
          type: array
          description: '*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
        input_message_content:
          $ref: '#/components/schemas/InputMessageContent'
      description: Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedaudio
    InputMessageContent:
      description: 'This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:'
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputmessagecontent
      anyOf:
      - $ref: '#/components/schemas/InputTextMessageContent'
      - $ref: '#/components/schemas/InputLocationMessageContent'
      - $ref: '#/components/schemas/InputVenueMessageContent'
      - $ref: '#/components/schemas/InputContactMessageContent'
    InputTextMessageContent:
      required:
      - message_text
      type: object
      properties:
        message_text:
          type: string
          description: Text of the message to be sent, 1-4096 characters
        parse_mode:
          type: string
          description: '*Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.'
        entities:
          type: array
          description: '*Optional*. List of special entities that appear in message text, which can be specified instead of *parse\_mode*'
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_web_page_preview:
          type: boolean
          description: '*Optional*. Disables link previews for links in the sent message'
      description: Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputtextmessagecontent
    InputLocationMessageContent:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          type: number
          description: Latitude of the location in degrees
        longitude:
          type: number
          description: Longitude of the location in degrees
        horizontal_accuracy:
          type: number
          description: '*Optional*. The radius of uncertainty for the location, measured in meters; 0-1500'
        live_period:
          type: integer
          description: '*Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.'
        heading:
          type: integer
          description: '*Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.'
        proximity_alert_radius:
          type: integer
          description: '*Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.'
      description: Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputlocationmessagecontent
    InputVenueMessageContent:
      required:
      - address
      - latitude
      - longitude
      - title
      type: object
      properties:
        latitude:
          type: number
          description: Latitude of the venue in degrees
        longitude:
          type: number
          description: Longitude of the venue in degrees
        title:
          type: string
          description: Name of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: '*Optional*. Foursquare identifier of the venue, if known'
        foursquare_type:
          type: string
          description: '*Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)'
        google_place_id:
          type: string
          description: '*Optional*. Google Places identifier of the venue'
        google_place_type:
          type: string
          description: '*Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)'
      description: Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputvenuemessagecontent
    InputContactMessageContent:
      required:
      - first_name
      - phone_number
      type: object
      properties:
        phone_number:
          type: string
          description: Contact's phone number
        first_name:
          type: string
          description: Contact's first name
        last_name:
          type: string
          description: '*Optional*. Contact''s last name'
        vcard:
          type: string
          description: '*Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes'
      description: Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
      externalDocs:
        url: https://core.telegram.org/bots/api/#inputcontactmessagecontent
    ChosenInlineResult:
      required:
      - from
      - query
      - result_id
      type: object
      properties:
        result_id:
          type: string
          description: The unique identifier for the result that was chosen
        from:
          $ref: '#/components/schemas/User'
        location:
          $ref: '#/components/schemas/Location'
        inline_message_id:
          type: string
          description: '*Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.'
        query:
          type: string
          description: The query that was used to obtain the result
      description: Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
      externalDocs:
        url: https://core.telegram.org/bots/api/#choseninlineresult
    LabeledPrice:
      required:
      - amount
      - label
      type: object
      properties:
        label:
          type: string
          description: Portion label
        amount:
          type: integer
          description: Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
      description: This object represents a portion of the price for goods or services.
      externalDocs:
        url: https://core.telegram.org/bots/api/#labeledprice
    Invoice:
      required:
      - currency
      - description
      - start_parameter
      - title
      - total_amount
      type: object
      properties:
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        start_parameter:
          type: string
          description: Unique bot deep-linking parameter that can be used to generate this invoice
        currency:
          type: string
          description: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
        total_amount:
          type: integer
          description: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
      description: This object contains basic information about an invoice.
      externalDocs:
        url: https://core.telegram.org/bots/api/#invoice
    ShippingAddress:
      required:
      - city
      - country_code
      - post_code
      - state
      - street_line1
      - street_line2
      type: object
      properties:
        country_code:
          type: string
          description: ISO 3166-1 alpha-2 country code
        state:
          type: string
          description: State, if applicable
        city:
          type: string
          description: City
        street_line1:
          type: string
          description: First line for the address
        street_line2:
          type: string
          description: Second line for the address
        post_code:
          type: string
          description: Address post code
      description: This object represents a shipping address.
      externalDocs:
        url: https://core.telegram.org/bots/api/#shippingaddress
    OrderInfo:
      type: object
      properties:
        name:
          type: string
          description: '*Optional*. User name'
        phone_number:
          type: string
          description: '*Optional*. User''s phone number'
        email:
          type: string
          description: '*Optional*. User email'
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
      description: This object represents information about an order.
      externalDocs:
        url: https://core.telegram.org/bots/api/#orderinfo
    ShippingOption:
      required:
      - id
      - prices
      - title
      type: object
      properties:
        id:
          type: string
          description: Shipping option identifier
        title:
          type: string
          description: Option title
        prices:
          type: array
          description: List of price portions
          items:
            $ref: '#/components/schemas/LabeledPrice'
      description: This object represents one shipping option.
      externalDocs:
        url: https://core.telegram.org/bots/api/#shippingoption
    SuccessfulPayment:
      required:
      - currency
      - invoice_payload
      - provider_payment_charge_id
      - telegram_payment_charge_id
      - total_amount
      type: object
      properties:
        currency:
          type: string
          description: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
        total_amount:
          type: integer
          description: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
        invoice_payload:
          type: string
          description: Bot specified invoice payload
        shipping_option_id:
          type: string
          description: '*Optional*. Identifier of the shipping option chosen by the user'
        order_info:
          $ref: '#/components/schemas/OrderInfo'
        telegram_payment_charge_id:
          type: string
          description: Telegram payment identifier
        provider_payment_charge_id:
          type: string
          description: Provider payment identifier
      description: This object contains basic information about a successful payment.
      externalDocs:
        url: https://core.telegram.org/bots/api/#successfulpayment
    ShippingQuery:
      required:
      - from
      - id
      - invoice_payload
      - shipping_address
      type: object
      properties:
        id:
          type: string
          description: Unique query identifier
        from:
          $ref: '#/components/schemas/User'
        invoice_payload:
          type: string
          description: Bot specified invoice payload
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
      description: This object contains information about an incoming shipping query.
      externalDocs:
        url: https://core.telegram.org/bots/api/#shippingquery
    PreCheckoutQuery:
      required:
      - currency
      - from
      - id
      - invoice_payload
      - total_amount
      type: object
      properties:
        id:
          type: string
          description: Unique query identifier
        from:
          $ref: '#/components/schemas/User'
        currency:
          type: string
          description: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
        total_amount:
          type: integer
          description: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
        invoice_payload:
          type: string
          description: Bot specified invoice payload
        shipping_option_id:
          type: string
          description: '*Optional*. Identifier of the shipping option chosen by the user'
        order_info:
          $ref: '#/components/schemas/OrderInfo'
      description: This object contains information about an incoming pre-checkout query.
      externalDocs:
        url: https://core.telegram.org/bots/api/#precheckoutquery
    PassportData:
      required:
      - credentials
      - data
      type: object
      properties:
        data:
          type: array
          description: Array with information about documents and other Telegram Passport elements that was shared with the bot
          items:
            $ref: '#/components/schemas/EncryptedPassportElement'
        credentials:
          $ref: '#/components/schemas/EncryptedCredentials'
      description: Contains information about Telegram Passport data shared with the bot by the user.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportdata
    PassportFile:
      required:
      - file_date
      - file_id
      - file_size
      - file_unique_id
      type: object
      properties:
        file_id:
          type: string
          description: Identifier for this file, which can be used to download or reuse the file
        file_unique_id:
          type: string
          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
        file_size:
          type: integer
          description: File size
        file_date:
          type: integer
          description: Unix time when the file was uploaded
      description: This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportfile
    EncryptedPassportElement:
      required:
      - hash
      - type
      type: object
      properties:
        type:
          type: string
          description: Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
          enum:
          - personal_details
          - passport
          - driver_license
          - identity_card
          - internal_passport
          - address
          - utility_bill
          - bank_statement
          - rental_agreement
          - passport_registration
          - temporary_registration
          - phone_number
          - email
        data:
          type: string
          description: '*Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).'
        phone_number:
          type: string
          description: '*Optional*. User''s verified phone number, available only for “phone\_number” type'
        email:
          type: string
          description: '*Optional*. User''s verified email address, available only for “email” type'
        files:
          type: array
          description: '*Optional*. Array of encrypted files with documents provided by the user, available for “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).'
          items:
            $ref: '#/components/schemas/PassportFile'
        front_side:
          $ref: '#/components/schemas/PassportFile'
        reverse_side:
          $ref: '#/components/schemas/PassportFile'
        selfie:
          $ref: '#/components/schemas/PassportFile'
        translation:
          type: array
          description: '*Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).'
          items:
            $ref: '#/components/schemas/PassportFile'
        hash:
          type: string
          description: Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
      description: Contains information about documents or other Telegram Passport elements shared with the bot by the user.
      externalDocs:
        url: https://core.telegram.org/bots/api/#encryptedpassportelement
    EncryptedCredentials:
      required:
      - data
      - hash
      - secret
      type: object
      properties:
        data:
          type: string
          description: Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
        hash:
          type: string
          description: Base64-encoded data hash for data authentication
        secret:
          type: string
          description: Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
      description: Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
      externalDocs:
        url: https://core.telegram.org/bots/api/#encryptedcredentials
    PassportElementError:
      description: 'This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:'
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerror
      anyOf:
      - $ref: '#/components/schemas/PassportElementErrorDataField'
      - $ref: '#/components/schemas/PassportElementErrorFrontSide'
      - $ref: '#/components/schemas/PassportElementErrorReverseSide'
      - $ref: '#/components/schemas/PassportElementErrorSelfie'
      - $ref: '#/components/schemas/PassportElementErrorFile'
      - $ref: '#/components/schemas/PassportElementErrorFiles'
      - $ref: '#/components/schemas/PassportElementErrorTranslationFile'
      - $ref: '#/components/schemas/PassportElementErrorTranslationFiles'
      - $ref: '#/components/schemas/PassportElementErrorUnspecified'
    PassportElementErrorDataField:
      required:
      - data_hash
      - field_name
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *data*
        type:
          type: string
          description: The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
          enum:
          - personal_details
          - passport
          - driver_license
          - identity_card
          - internal_passport
          - address
        field_name:
          type: string
          description: Name of the data field which has the error
        data_hash:
          type: string
          description: Base64-encoded data hash
        message:
          type: string
          description: Error message
      description: Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrordatafield
    PassportElementErrorFrontSide:
      required:
      - file_hash
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *front\_side*
        type:
          type: string
          description: The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
          enum:
          - passport
          - driver_license
          - identity_card
          - internal_passport
        file_hash:
          type: string
          description: Base64-encoded hash of the file with the front side of the document
        message:
          type: string
          description: Error message
      description: Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrorfrontside
    PassportElementErrorReverseSide:
      required:
      - file_hash
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *reverse\_side*
        type:
          type: string
          description: The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
          enum:
          - driver_license
          - identity_card
        file_hash:
          type: string
          description: Base64-encoded hash of the file with the reverse side of the document
        message:
          type: string
          description: Error message
      description: Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrorreverseside
    PassportElementErrorSelfie:
      required:
      - file_hash
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *selfie*
        type:
          type: string
          description: The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
          enum:
          - passport
          - driver_license
          - identity_card
          - internal_passport
        file_hash:
          type: string
          description: Base64-encoded hash of the file with the selfie
        message:
          type: string
          description: Error message
      description: Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrorselfie
    PassportElementErrorFile:
      required:
      - file_hash
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *file*
        type:
          type: string
          description: The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
          enum:
          - utility_bill
          - bank_statement
          - rental_agreement
          - passport_registration
          - temporary_registration
        file_hash:
          type: string
          description: Base64-encoded file hash
        message:
          type: string
          description: Error message
      description: Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrorfile
    PassportElementErrorFiles:
      required:
      - file_hashes
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *files*
        type:
          type: string
          description: The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
          enum:
          - utility_bill
          - bank_statement
          - rental_agreement
          - passport_registration
          - temporary_registration
        file_hashes:
          type: array
          description: List of base64-encoded file hashes
          items:
            type: string
        message:
          type: string
          description: Error message
      description: Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrorfiles
    PassportElementErrorTranslationFile:
      required:
      - file_hash
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *translation\_file*
        type:
          type: string
          description: Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
          enum:
          - passport
          - driver_license
          - identity_card
          - internal_passport
          - utility_bill
          - bank_statement
          - rental_agreement
          - passport_registration
          - temporary_registration
        file_hash:
          type: string
          description: Base64-encoded file hash
        message:
          type: string
          description: Error message
      description: Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrortranslationfile
    PassportElementErrorTranslationFiles:
      required:
      - file_hashes
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *translation\_files*
        type:
          type: string
          description: Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
          enum:
          - passport
          - driver_license
          - identity_card
          - internal_passport
          - utility_bill
          - bank_statement
          - rental_agreement
          - passport_registration
          - temporary_registration
        file_hashes:
          type: array
          description: List of base64-encoded file hashes
          items:
            type: string
        message:
          type: string
          description: Error message
      description: Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrortranslationfiles
    PassportElementErrorUnspecified:
      required:
      - element_hash
      - message
      - source
      - type
      type: object
      properties:
        source:
          type: string
          description: Error source, must be *unspecified*
        type:
          type: string
          description: Type of element of the user's Telegram Passport which has the issue
        element_hash:
          type: string
          description: Base64-encoded element hash
        message:
          type: string
          description: Error message
      description: Represents an issue in an unspecified place. The error is considered resolved when new data is added.
      externalDocs:
        url: https://core.telegram.org/bots/api/#passportelementerrorunspecified
    Game:
      required:
      - description
      - photo
      - title
      type: object
      properties:
        title:
          type: string
          description: Title of the game
        description:
          type: string
          description: Description of the game
        photo:
          type: array
          description: Photo that will be displayed in the game message in chats.
          items:
            $ref: '#/components/schemas/PhotoSize'
        text:
          type: string
          description: '*Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.'
        text_entities:
          type: array
          description: '*Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.'
          items:
            $ref: '#/components/schemas/MessageEntity'
        animation:
          $ref: '#/components/schemas/Animation'
      description: This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
      externalDocs:
        url: https://core.telegram.org/bots/api/#game
    CallbackGame:
      description: A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
      externalDocs:
        url: https://core.telegram.org/bots/api/#callbackgame
    GameHighScore:
      required:
      - position
      - score
      - user
      type: object
      properties:
        position:
          type: integer
          description: Position in high score table for the game
        user:
          $ref: '#/components/schemas/User'
        score:
          type: integer
          description: Score
      description: This object represents one row of the high scores table for a game.
      externalDocs:
        url: https://core.telegram.org/bots/api/#gamehighscore
    body:
      type: object
      properties:
        offset:
          type: integer
          description: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
          default: 100
        timeout:
          type: integer
          description: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
          default: 0
        allowed_updates:
          type: array
          description: "A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  \n\nPlease note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time."
          items:
            type: string
    body_1:
      type: object
      properties:
        offset:
          type: integer
          description: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
          default: 100
        timeout:
          type: integer
          description: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
          default: 0
        allowed_updates:
          type: array
          description: "A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  \n\nPlease note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time."
          items:
            type: string
    body_2:
      type: object
      properties:
        offset:
          type: integer
          description: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
          default: 100
        timeout:
          type: integer
          description: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
          default: 0
        allowed_updates:
          type: array
          description: "A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  \n\nPlease note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time."
          items:
            type: string
    inline_response_200:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          type: array
          items:
            $ref: '#/components/schemas/Update'
    body_3:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: HTTPS url to send updates to. Use an empty string to remove webhook integration
        certificate:
          $ref: '#/components/schemas/InputFile'
        ip_address:
          type: string
          description: The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
        max_connections:
          type: integer
          description: Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.
          default: 40
        allowed_updates:
          type: array
          description: "A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  \nPlease note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time."
          items:
            type: string
        drop_pending_updates:
          type: boolean
          description: Pass *True* to drop all pending updates
    inline_response_200_1:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          type: boolean
          default: true
    body_4:
      type: object
      properties:
        drop_pending_updates:
          type: boolean
          description: Pass *True* to drop all pending updates
    body_5:
      type: object
      properties:
        drop_pending_updates:
          type: boolean
          description: Pass *True* to drop all pending updates
    body_6:
      type: object
      properties:
        drop_pending_updates:
          type: boolean
          description: Pass *True* to drop all pending updates
    inline_response_200_2:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/WebhookInfo'
    inline_response_200_3:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/User'
    body_7:
      required:
      - chat_id
      - text
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        text:
          type: string
          description: Text of the message to be sent, 1-4096 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        entities:
          type: array
          description: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_web_page_preview:
          type: boolean
          description: Disables link previews for links in this message
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_8:
      required:
      - chat_id
      - text
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        text:
          type: string
          description: Text of the message to be sent, 1-4096 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        entities:
          type: array
          description: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_web_page_preview:
          type: boolean
          description: Disables link previews for links in this message
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_9:
      required:
      - chat_id
      - text
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        text:
          type: string
          description: Text of the message to be sent, 1-4096 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        entities:
          type: array
          description: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_web_page_preview:
          type: boolean
          description: Disables link previews for links in this message
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    inline_response_200_4:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/Message'
    body_10:
      required:
      - chat_id
      - from_chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        from_chat_id:
          description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        message_id:
          type: integer
          description: Message identifier in the chat specified in *from\_chat\_id*
    body_11:
      required:
      - chat_id
      - from_chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        from_chat_id:
          description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        message_id:
          type: integer
          description: Message identifier in the chat specified in *from\_chat\_id*
    body_12:
      required:
      - chat_id
      - from_chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        from_chat_id:
          description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        message_id:
          type: integer
          description: Message identifier in the chat specified in *from\_chat\_id*
    body_13:
      required:
      - chat_id
      - from_chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        from_chat_id:
          description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Message identifier in the chat specified in *from\_chat\_id*
        caption:
          type: string
          description: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
        parse_mode:
          type: string
          description: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_14:
      required:
      - chat_id
      - from_chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        from_chat_id:
          description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Message identifier in the chat specified in *from\_chat\_id*
        caption:
          type: string
          description: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
        parse_mode:
          type: string
          description: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_15:
      required:
      - chat_id
      - from_chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        from_chat_id:
          description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Message identifier in the chat specified in *from\_chat\_id*
        caption:
          type: string
          description: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
        parse_mode:
          type: string
          description: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    inline_response_200_5:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/MessageId'
    body_16:
      required:
      - chat_id
      - photo
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        photo:
          description: Photo to send. Pass a file\_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: Photo caption (may also be used when resending photos by *file\_id*), 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_17:
      required:
      - audio
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        audio:
          description: Audio file to send. Pass a file\_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: Audio caption, 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        duration:
          type: integer
          description: Duration of the audio in seconds
        performer:
          type: string
          description: Performer
        title:
          type: string
          description: Track name
        thumb:
          description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_18:
      required:
      - chat_id
      - document
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        document:
          description: File to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        thumb:
          description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: Document caption (may also be used when resending documents by *file\_id*), 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_content_type_detection:
          type: boolean
          description: Disables automatic server-side content type detection for files uploaded using multipart/form-data
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_19:
      required:
      - chat_id
      - video
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        video:
          description: Video to send. Pass a file\_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        duration:
          type: integer
          description: Duration of sent video in seconds
        width:
          type: integer
          description: Video width
        height:
          type: integer
          description: Video height
        thumb:
          description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: Video caption (may also be used when resending videos by *file\_id*), 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        supports_streaming:
          type: boolean
          description: Pass *True*, if the uploaded video is suitable for streaming
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_20:
      required:
      - animation
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        animation:
          description: Animation to send. Pass a file\_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        duration:
          type: integer
          description: Duration of sent animation in seconds
        width:
          type: integer
          description: Animation width
        height:
          type: integer
          description: Animation height
        thumb:
          description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: Animation caption (may also be used when resending animation by *file\_id*), 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_21:
      required:
      - chat_id
      - voice
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        voice:
          description: Audio file to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        caption:
          type: string
          description: Voice message caption, 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        duration:
          type: integer
          description: Duration of the voice message in seconds
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_22:
      required:
      - chat_id
      - video_note
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        video_note:
          description: Video note to send. Pass a file\_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Sending video notes by a URL is currently unsupported
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        duration:
          type: integer
          description: Duration of sent video in seconds
        length:
          type: integer
          description: Video width and height, i.e. diameter of the video message
        thumb:
          description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_23:
      required:
      - chat_id
      - media
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        media:
          type: array
          description: A JSON-serialized array describing messages to be sent, must include 2-10 items
          items:
            anyOf:
            - $ref: '#/components/schemas/InputMediaAudio'
            - $ref: '#/components/schemas/InputMediaDocument'
            - $ref: '#/components/schemas/InputMediaPhoto'
            - $ref: '#/components/schemas/InputMediaVideo'
        disable_notification:
          type: boolean
          description: Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the messages are a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
    inline_response_200_6:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    body_24:
      required:
      - chat_id
      - latitude
      - longitude
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        latitude:
          type: number
          description: Latitude of the location
        longitude:
          type: number
          description: Longitude of the location
        horizontal_accuracy:
          type: number
          description: The radius of uncertainty for the location, measured in meters; 0-1500
        live_period:
          type: integer
          description: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
        heading:
          type: integer
          description: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
        proximity_alert_radius:
          type: integer
          description: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_25:
      required:
      - chat_id
      - latitude
      - longitude
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        latitude:
          type: number
          description: Latitude of the location
        longitude:
          type: number
          description: Longitude of the location
        horizontal_accuracy:
          type: number
          description: The radius of uncertainty for the location, measured in meters; 0-1500
        live_period:
          type: integer
          description: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
        heading:
          type: integer
          description: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
        proximity_alert_radius:
          type: integer
          description: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_26:
      required:
      - chat_id
      - latitude
      - longitude
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        latitude:
          type: number
          description: Latitude of the location
        longitude:
          type: number
          description: Longitude of the location
        horizontal_accuracy:
          type: number
          description: The radius of uncertainty for the location, measured in meters; 0-1500
        live_period:
          type: integer
          description: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
        heading:
          type: integer
          description: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
        proximity_alert_radius:
          type: integer
          description: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_27:
      required:
      - latitude
      - longitude
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        latitude:
          type: number
          description: Latitude of new location
        longitude:
          type: number
          description: Longitude of new location
        horizontal_accuracy:
          type: number
          description: The radius of uncertainty for the location, measured in meters; 0-1500
        heading:
          type: integer
          description: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
        proximity_alert_radius:
          type: integer
          description: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_28:
      required:
      - latitude
      - longitude
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        latitude:
          type: number
          description: Latitude of new location
        longitude:
          type: number
          description: Longitude of new location
        horizontal_accuracy:
          type: number
          description: The radius of uncertainty for the location, measured in meters; 0-1500
        heading:
          type: integer
          description: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
        proximity_alert_radius:
          type: integer
          description: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_29:
      required:
      - latitude
      - longitude
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        latitude:
          type: number
          description: Latitude of new location
        longitude:
          type: number
          description: Longitude of new location
        horizontal_accuracy:
          type: number
          description: The radius of uncertainty for the location, measured in meters; 0-1500
        heading:
          type: integer
          description: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
        proximity_alert_radius:
          type: integer
          description: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    inline_response_200_7:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          anyOf:
          - $ref: '#/components/schemas/Message'
          - type: boolean
            default: true
    body_30:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_31:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_32:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_33:
      required:
      - address
      - chat_id
      - latitude
      - longitude
      - title
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        latitude:
          type: number
          description: Latitude of the venue
        longitude:
          type: number
          description: Longitude of the venue
        title:
          type: string
          description: Name of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: Foursquare identifier of the venue
        foursquare_type:
          type: string
          description: Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
        google_place_id:
          type: string
          description: Google Places identifier of the venue
        google_place_type:
          type: string
          description: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_34:
      required:
      - address
      - chat_id
      - latitude
      - longitude
      - title
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        latitude:
          type: number
          description: Latitude of the venue
        longitude:
          type: number
          description: Longitude of the venue
        title:
          type: string
          description: Name of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: Foursquare identifier of the venue
        foursquare_type:
          type: string
          description: Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
        google_place_id:
          type: string
          description: Google Places identifier of the venue
        google_place_type:
          type: string
          description: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_35:
      required:
      - address
      - chat_id
      - latitude
      - longitude
      - title
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        latitude:
          type: number
          description: Latitude of the venue
        longitude:
          type: number
          description: Longitude of the venue
        title:
          type: string
          description: Name of the venue
        address:
          type: string
          description: Address of the venue
        foursquare_id:
          type: string
          description: Foursquare identifier of the venue
        foursquare_type:
          type: string
          description: Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
        google_place_id:
          type: string
          description: Google Places identifier of the venue
        google_place_type:
          type: string
          description: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_36:
      required:
      - chat_id
      - first_name
      - phone_number
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        phone_number:
          type: string
          description: Contact's phone number
        first_name:
          type: string
          description: Contact's first name
        last_name:
          type: string
          description: Contact's last name
        vcard:
          type: string
          description: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_37:
      required:
      - chat_id
      - first_name
      - phone_number
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        phone_number:
          type: string
          description: Contact's phone number
        first_name:
          type: string
          description: Contact's first name
        last_name:
          type: string
          description: Contact's last name
        vcard:
          type: string
          description: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_38:
      required:
      - chat_id
      - first_name
      - phone_number
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        phone_number:
          type: string
          description: Contact's phone number
        first_name:
          type: string
          description: Contact's first name
        last_name:
          type: string
          description: Contact's last name
        vcard:
          type: string
          description: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_39:
      required:
      - chat_id
      - options
      - question
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        question:
          type: string
          description: Poll question, 1-300 characters
        options:
          type: array
          description: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
          items:
            type: string
        is_anonymous:
          type: boolean
          description: True, if the poll needs to be anonymous, defaults to *True*
        type:
          type: string
          description: Poll type, “quiz” or “regular”, defaults to “regular”
        allows_multiple_answers:
          type: boolean
          description: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
        correct_option_id:
          type: integer
          description: 0-based identifier of the correct answer option, required for polls in quiz mode
        explanation:
          type: string
          description: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
        explanation_parse_mode:
          type: string
          description: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        explanation_entities:
          type: array
          description: List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        open_period:
          type: integer
          description: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
        close_date:
          type: integer
          description: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
        is_closed:
          type: boolean
          description: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_40:
      required:
      - chat_id
      - options
      - question
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        question:
          type: string
          description: Poll question, 1-300 characters
        options:
          type: array
          description: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
          items:
            type: string
        is_anonymous:
          type: boolean
          description: True, if the poll needs to be anonymous, defaults to *True*
        type:
          type: string
          description: Poll type, “quiz” or “regular”, defaults to “regular”
        allows_multiple_answers:
          type: boolean
          description: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
        correct_option_id:
          type: integer
          description: 0-based identifier of the correct answer option, required for polls in quiz mode
        explanation:
          type: string
          description: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
        explanation_parse_mode:
          type: string
          description: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        explanation_entities:
          type: array
          description: List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        open_period:
          type: integer
          description: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
        close_date:
          type: integer
          description: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
        is_closed:
          type: boolean
          description: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_41:
      required:
      - chat_id
      - options
      - question
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        question:
          type: string
          description: Poll question, 1-300 characters
        options:
          type: array
          description: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
          items:
            type: string
        is_anonymous:
          type: boolean
          description: True, if the poll needs to be anonymous, defaults to *True*
        type:
          type: string
          description: Poll type, “quiz” or “regular”, defaults to “regular”
        allows_multiple_answers:
          type: boolean
          description: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
        correct_option_id:
          type: integer
          description: 0-based identifier of the correct answer option, required for polls in quiz mode
        explanation:
          type: string
          description: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
        explanation_parse_mode:
          type: string
          description: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        explanation_entities:
          type: array
          description: List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        open_period:
          type: integer
          description: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
        close_date:
          type: integer
          description: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
        is_closed:
          type: boolean
          description: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_42:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        emoji:
          type: string
          description: Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
          default: 🎲
          enum:
          - 🎲
          - 🎯
          - 🏀
          - ⚽
          - 🎰
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_43:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        emoji:
          type: string
          description: Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
          default: 🎲
          enum:
          - 🎲
          - 🎯
          - 🏀
          - ⚽
          - 🎰
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_44:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        emoji:
          type: string
          description: Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
          default: 🎲
          enum:
          - 🎲
          - 🎯
          - 🏀
          - ⚽
          - 🎰
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_45:
      required:
      - action
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        action:
          type: string
          description: 'Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).'
    body_46:
      required:
      - action
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        action:
          type: string
          description: 'Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).'
    body_47:
      required:
      - action
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        action:
          type: string
          description: 'Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).'
    body_48:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: Unique identifier of the target user
        offset:
          type: integer
          description: Sequential number of the first photo to be returned. By default, all photos are returned.
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
          default: 100
    body_49:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: Unique identifier of the target user
        offset:
          type: integer
          description: Sequential number of the first photo to be returned. By default, all photos are returned.
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
          default: 100
    body_50:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: Unique identifier of the target user
        offset:
          type: integer
          description: Sequential number of the first photo to be returned. By default, all photos are returned.
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
          default: 100
    inline_response_200_8:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/UserProfilePhotos'
    body_51:
      required:
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: File identifier to get info about
    body_52:
      required:
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: File identifier to get info about
    body_53:
      required:
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: File identifier to get info about
    inline_response_200_9:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/File'
    body_54:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        until_date:
          type: integer
          description: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
    body_55:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        until_date:
          type: integer
          description: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
    body_56:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        until_date:
          type: integer
          description: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
    body_57:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        only_if_banned:
          type: boolean
          description: Do nothing if the user is not banned
    body_58:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        only_if_banned:
          type: boolean
          description: Do nothing if the user is not banned
    body_59:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        only_if_banned:
          type: boolean
          description: Do nothing if the user is not banned
    body_60:
      required:
      - chat_id
      - permissions
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        permissions:
          $ref: '#/components/schemas/ChatPermissions'
        until_date:
          type: integer
          description: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
    body_61:
      required:
      - chat_id
      - permissions
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        permissions:
          $ref: '#/components/schemas/ChatPermissions'
        until_date:
          type: integer
          description: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
    body_62:
      required:
      - chat_id
      - permissions
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        permissions:
          $ref: '#/components/schemas/ChatPermissions'
        until_date:
          type: integer
          description: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
    body_63:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        is_anonymous:
          type: boolean
          description: Pass *True*, if the administrator's presence in the chat is hidden
        can_change_info:
          type: boolean
          description: Pass True, if the administrator can change chat title, photo and other settings
        can_post_messages:
          type: boolean
          description: Pass True, if the administrator can create channel posts, channels only
        can_edit_messages:
          type: boolean
          description: Pass True, if the administrator can edit messages of other users and can pin messages, channels only
        can_delete_messages:
          type: boolean
          description: Pass True, if the administrator can delete messages of other users
        can_invite_users:
          type: boolean
          description: Pass True, if the administrator can invite new users to the chat
        can_restrict_members:
          type: boolean
          description: Pass True, if the administrator can restrict, ban or unban chat members
        can_pin_messages:
          type: boolean
          description: Pass True, if the administrator can pin messages, supergroups only
        can_promote_members:
          type: boolean
          description: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
    body_64:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        is_anonymous:
          type: boolean
          description: Pass *True*, if the administrator's presence in the chat is hidden
        can_change_info:
          type: boolean
          description: Pass True, if the administrator can change chat title, photo and other settings
        can_post_messages:
          type: boolean
          description: Pass True, if the administrator can create channel posts, channels only
        can_edit_messages:
          type: boolean
          description: Pass True, if the administrator can edit messages of other users and can pin messages, channels only
        can_delete_messages:
          type: boolean
          description: Pass True, if the administrator can delete messages of other users
        can_invite_users:
          type: boolean
          description: Pass True, if the administrator can invite new users to the chat
        can_restrict_members:
          type: boolean
          description: Pass True, if the administrator can restrict, ban or unban chat members
        can_pin_messages:
          type: boolean
          description: Pass True, if the administrator can pin messages, supergroups only
        can_promote_members:
          type: boolean
          description: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
    body_65:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        is_anonymous:
          type: boolean
          description: Pass *True*, if the administrator's presence in the chat is hidden
        can_change_info:
          type: boolean
          description: Pass True, if the administrator can change chat title, photo and other settings
        can_post_messages:
          type: boolean
          description: Pass True, if the administrator can create channel posts, channels only
        can_edit_messages:
          type: boolean
          description: Pass True, if the administrator can edit messages of other users and can pin messages, channels only
        can_delete_messages:
          type: boolean
          description: Pass True, if the administrator can delete messages of other users
        can_invite_users:
          type: boolean
          description: Pass True, if the administrator can invite new users to the chat
        can_restrict_members:
          type: boolean
          description: Pass True, if the administrator can restrict, ban or unban chat members
        can_pin_messages:
          type: boolean
          description: Pass True, if the administrator can pin messages, supergroups only
        can_promote_members:
          type: boolean
          description: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
    body_66:
      required:
      - chat_id
      - custom_title
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        custom_title:
          type: string
          description: New custom title for the administrator; 0-16 characters, emoji are not allowed
    body_67:
      required:
      - chat_id
      - custom_title
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        custom_title:
          type: string
          description: New custom title for the administrator; 0-16 characters, emoji are not allowed
    body_68:
      required:
      - chat_id
      - custom_title
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
        custom_title:
          type: string
          description: New custom title for the administrator; 0-16 characters, emoji are not allowed
    body_69:
      required:
      - chat_id
      - permissions
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        permissions:
          $ref: '#/components/schemas/ChatPermissions'
    body_70:
      required:
      - chat_id
      - permissions
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        permissions:
          $ref: '#/components/schemas/ChatPermissions'
    body_71:
      required:
      - chat_id
      - permissions
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        permissions:
          $ref: '#/components/schemas/ChatPermissions'
    body_72:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_73:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_74:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    inline_response_200_10:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          type: string
    body_75:
      required:
      - chat_id
      - photo
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        photo:
          $ref: '#/components/schemas/InputFile'
    body_76:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_77:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_78:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_79:
      required:
      - chat_id
      - title
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        title:
          type: string
          description: New chat title, 1-255 characters
    body_80:
      required:
      - chat_id
      - title
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        title:
          type: string
          description: New chat title, 1-255 characters
    body_81:
      required:
      - chat_id
      - title
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        title:
          type: string
          description: New chat title, 1-255 characters
    body_82:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        description:
          type: string
          description: New chat description, 0-255 characters
    body_83:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        description:
          type: string
          description: New chat description, 0-255 characters
    body_84:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        description:
          type: string
          description: New chat description, 0-255 characters
    body_85:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of a message to pin
        disable_notification:
          type: boolean
          description: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
    body_86:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of a message to pin
        disable_notification:
          type: boolean
          description: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
    body_87:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of a message to pin
        disable_notification:
          type: boolean
          description: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
    body_88:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
    body_89:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
    body_90:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
    body_91:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_92:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_93:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_94:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_95:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_96:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_97:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_98:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_99:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    inline_response_200_11:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/Chat'
    body_100:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_101:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_102:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    inline_response_200_12:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          type: array
          items:
            $ref: '#/components/schemas/ChatMember'
    body_103:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_104:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    body_105:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
    inline_response_200_13:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          type: integer
    body_106:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
    body_107:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
    body_108:
      required:
      - chat_id
      - user_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        user_id:
          type: integer
          description: Unique identifier of the target user
    inline_response_200_14:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/ChatMember'
    body_109:
      required:
      - chat_id
      - sticker_set_name
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        sticker_set_name:
          type: string
          description: Name of the sticker set to be set as the group sticker set
    body_110:
      required:
      - chat_id
      - sticker_set_name
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        sticker_set_name:
          type: string
          description: Name of the sticker set to be set as the group sticker set
    body_111:
      required:
      - chat_id
      - sticker_set_name
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
        sticker_set_name:
          type: string
          description: Name of the sticker set to be set as the group sticker set
    body_112:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
    body_113:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
    body_114:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
          anyOf:
          - type: integer
          - type: string
    body_115:
      required:
      - callback_query_id
      type: object
      properties:
        callback_query_id:
          type: string
          description: Unique identifier for the query to be answered
        text:
          type: string
          description: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
        show_alert:
          type: boolean
          description: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
          default: false
        url:
          type: string
          description: "URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  \n\nOtherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter."
        cache_time:
          type: integer
          description: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
          default: 0
    body_116:
      required:
      - callback_query_id
      type: object
      properties:
        callback_query_id:
          type: string
          description: Unique identifier for the query to be answered
        text:
          type: string
          description: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
        show_alert:
          type: boolean
          description: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
          default: false
        url:
          type: string
          description: "URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  \n\nOtherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter."
        cache_time:
          type: integer
          description: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
          default: 0
    body_117:
      required:
      - callback_query_id
      type: object
      properties:
        callback_query_id:
          type: string
          description: Unique identifier for the query to be answered
        text:
          type: string
          description: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
        show_alert:
          type: boolean
          description: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
          default: false
        url:
          type: string
          description: "URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  \n\nOtherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter."
        cache_time:
          type: integer
          description: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
          default: 0
    body_118:
      required:
      - commands
      type: object
      properties:
        commands:
          type: array
          description: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
          items:
            $ref: '#/components/schemas/BotCommand'
    body_119:
      required:
      - commands
      type: object
      properties:
        commands:
          type: array
          description: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
          items:
            $ref: '#/components/schemas/BotCommand'
    body_120:
      required:
      - commands
      type: object
      properties:
        commands:
          type: array
          description: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
          items:
            $ref: '#/components/schemas/BotCommand'
    inline_response_200_15:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          type: array
          items:
            $ref: '#/components/schemas/BotCommand'
    body_121:
      required:
      - text
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        text:
          type: string
          description: New text of the message, 1-4096 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        entities:
          type: array
          description: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_web_page_preview:
          type: boolean
          description: Disables link previews for links in this message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_122:
      required:
      - text
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        text:
          type: string
          description: New text of the message, 1-4096 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        entities:
          type: array
          description: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_web_page_preview:
          type: boolean
          description: Disables link previews for links in this message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_123:
      required:
      - text
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        text:
          type: string
          description: New text of the message, 1-4096 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        entities:
          type: array
          description: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        disable_web_page_preview:
          type: boolean
          description: Disables link previews for links in this message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_124:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        caption:
          type: string
          description: New caption of the message, 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_125:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        caption:
          type: string
          description: New caption of the message, 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_126:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        caption:
          type: string
          description: New caption of the message, 0-1024 characters after entities parsing
        parse_mode:
          type: string
          description: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
        caption_entities:
          type: array
          description: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
          items:
            $ref: '#/components/schemas/MessageEntity'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_127:
      required:
      - media
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        media:
          $ref: '#/components/schemas/InputMedia'
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_128:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_129:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_130:
      type: object
      properties:
        chat_id:
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_131:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of the original message with the poll
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_132:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of the original message with the poll
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_133:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of the original message with the poll
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    inline_response_200_16:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/Poll'
    body_134:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of the message to delete
    body_135:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of the message to delete
    body_136:
      required:
      - chat_id
      - message_id
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        message_id:
          type: integer
          description: Identifier of the message to delete
    body_137:
      required:
      - chat_id
      - sticker
      type: object
      properties:
        chat_id:
          description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
          anyOf:
          - type: integer
          - type: string
        sticker:
          description: Sticker to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
          anyOf:
          - $ref: '#/components/schemas/InlineKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardMarkup'
          - $ref: '#/components/schemas/ReplyKeyboardRemove'
          - $ref: '#/components/schemas/ForceReply'
    body_138:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the sticker set
    body_139:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the sticker set
    body_140:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the sticker set
    inline_response_200_17:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          $ref: '#/components/schemas/StickerSet'
    body_141:
      required:
      - png_sticker
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier of sticker file owner
        png_sticker:
          $ref: '#/components/schemas/InputFile'
    body_142:
      required:
      - emojis
      - name
      - title
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier of created sticker set owner
        name:
          type: string
          description: Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in *“\_by\_<bot username>”*. *<bot\_username>* is case insensitive. 1-64 characters.
        title:
          type: string
          description: Sticker set title, 1-64 characters
        png_sticker:
          description: '**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)'
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        tgs_sticker:
          $ref: '#/components/schemas/InputFile'
        emojis:
          type: string
          description: One or more emoji corresponding to the sticker
        contains_masks:
          type: boolean
          description: Pass *True*, if a set of mask stickers should be created
        mask_position:
          $ref: '#/components/schemas/MaskPosition'
    body_143:
      required:
      - emojis
      - name
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier of sticker set owner
        name:
          type: string
          description: Sticker set name
        png_sticker:
          description: '**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)'
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
        tgs_sticker:
          $ref: '#/components/schemas/InputFile'
        emojis:
          type: string
          description: One or more emoji corresponding to the sticker
        mask_position:
          $ref: '#/components/schemas/MaskPosition'
    body_144:
      required:
      - position
      - sticker
      type: object
      properties:
        sticker:
          type: string
          description: File identifier of the sticker
        position:
          type: integer
          description: New sticker position in the set, zero-based
    body_145:
      required:
      - position
      - sticker
      type: object
      properties:
        sticker:
          type: string
          description: File identifier of the sticker
        position:
          type: integer
          description: New sticker position in the set, zero-based
    body_146:
      required:
      - position
      - sticker
      type: object
      properties:
        sticker:
          type: string
          description: File identifier of the sticker
        position:
          type: integer
          description: New sticker position in the set, zero-based
    body_147:
      required:
      - sticker
      type: object
      properties:
        sticker:
          type: string
          description: File identifier of the sticker
    body_148:
      required:
      - sticker
      type: object
      properties:
        sticker:
          type: string
          description: File identifier of the sticker
    body_149:
      required:
      - sticker
      type: object
      properties:
        sticker:
          type: string
          description: File identifier of the sticker
    body_150:
      required:
      - name
      - user_id
      type: object
      properties:
        name:
          type: string
          description: Sticker set name
        user_id:
          type: integer
          description: User identifier of the sticker set owner
        thumb:
          description: A **PNG** image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a **TGS** animation with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.org/animated_stickers#technical-requirements)[https://core.telegram.org/animated\_stickers#technical-requirements](https://core.telegram.org/animated_stickers#technical-requirements) for animated sticker technical requirements. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Animated sticker set thumbnail can't be uploaded via HTTP URL.
          anyOf:
          - $ref: '#/components/schemas/InputFile'
          - type: string
    body_151:
      required:
      - inline_query_id
      - results
      type: object
      properties:
        inline_query_id:
          type: string
          description: Unique identifier for the answered query
        results:
          type: array
          description: A JSON-serialized array of results for the inline query
          items:
            $ref: '#/components/schemas/InlineQueryResult'
        cache_time:
          type: integer
          description: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
          default: 300
        is_personal:
          type: boolean
          description: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
        next_offset:
          type: string
          description: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
        switch_pm_text:
          type: string
          description: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
        switch_pm_parameter:
          type: string
          description: "[Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  \n\n*Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities."
    body_152:
      required:
      - inline_query_id
      - results
      type: object
      properties:
        inline_query_id:
          type: string
          description: Unique identifier for the answered query
        results:
          type: array
          description: A JSON-serialized array of results for the inline query
          items:
            $ref: '#/components/schemas/InlineQueryResult'
        cache_time:
          type: integer
          description: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
          default: 300
        is_personal:
          type: boolean
          description: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
        next_offset:
          type: string
          description: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
        switch_pm_text:
          type: string
          description: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
        switch_pm_parameter:
          type: string
          description: "[Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  \n\n*Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities."
    body_153:
      required:
      - inline_query_id
      - results
      type: object
      properties:
        inline_query_id:
          type: string
          description: Unique identifier for the answered query
        results:
          type: array
          description: A JSON-serialized array of results for the inline query
          items:
            $ref: '#/components/schemas/InlineQueryResult'
        cache_time:
          type: integer
          description: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
          default: 300
        is_personal:
          type: boolean
          description: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
        next_offset:
          type: string
          description: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
        switch_pm_text:
          type: string
          description: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
        switch_pm_parameter:
          type: string
          description: "[Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  \n\n*Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities."
    body_154:
      required:
      - chat_id
      - currency
      - description
      - payload
      - prices
      - provider_token
      - start_parameter
      - title
      type: object
      properties:
        chat_id:
          type: integer
          description: Unique identifier for the target private chat
        title:
          type: string
          description: Product name, 1-32 characters
        description:
          type: string
          description: Product description, 1-255 characters
        payload:
          type: string
          description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
        provider_token:
          type: string
          description: Payments provider token, obtained via [Botfather](https://t.me/botfather)
        start_parameter:
          type: string
          description: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
        currency:
          type: string
          description: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
        prices:
          type: array
          description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
          items:
            $ref: '#/components/schemas/LabeledPrice'
        provider_data:
          type: string
          description: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
        photo_url:
          type: string
          description: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
        photo_size:
          type: integer
          description: Photo size
        photo_width:
          type: integer
          description: Photo width
        photo_height:
          type: integer
          description: Photo height
        need_name:
          type: boolean
          description: Pass *True*, if you require the user's full name to complete the order
        need_phone_number:
          type: boolean
          description: Pass *True*, if you require the user's phone number to complete the order
        need_email:
          type: boolean
          description: Pass *True*, if you require the user's email address to complete the order
        need_shipping_address:
          type: boolean
          description: Pass *True*, if you require the user's shipping address to complete the order
        send_phone_number_to_provider:
          type: boolean
          description: Pass *True*, if user's phone number should be sent to provider
        send_email_to_provider:
          type: boolean
          description: Pass *True*, if user's email address should be sent to provider
        is_flexible:
          type: boolean
          description: Pass *True*, if the final price depends on the shipping method
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_155:
      required:
      - chat_id
      - currency
      - description
      - payload
      - prices
      - provider_token
      - start_parameter
      - title
      type: object
      properties:
        chat_id:
          type: integer
          description: Unique identifier for the target private chat
        title:
          type: string
          description: Product name, 1-32 characters
        description:
          type: string
          description: Product description, 1-255 characters
        payload:
          type: string
          description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
        provider_token:
          type: string
          description: Payments provider token, obtained via [Botfather](https://t.me/botfather)
        start_parameter:
          type: string
          description: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
        currency:
          type: string
          description: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
        prices:
          type: array
          description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
          items:
            $ref: '#/components/schemas/LabeledPrice'
        provider_data:
          type: string
          description: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
        photo_url:
          type: string
          description: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
        photo_size:
          type: integer
          description: Photo size
        photo_width:
          type: integer
          description: Photo width
        photo_height:
          type: integer
          description: Photo height
        need_name:
          type: boolean
          description: Pass *True*, if you require the user's full name to complete the order
        need_phone_number:
          type: boolean
          description: Pass *True*, if you require the user's phone number to complete the order
        need_email:
          type: boolean
          description: Pass *True*, if you require the user's email address to complete the order
        need_shipping_address:
          type: boolean
          description: Pass *True*, if you require the user's shipping address to complete the order
        send_phone_number_to_provider:
          type: boolean
          description: Pass *True*, if user's phone number should be sent to provider
        send_email_to_provider:
          type: boolean
          description: Pass *True*, if user's email address should be sent to provider
        is_flexible:
          type: boolean
          description: Pass *True*, if the final price depends on the shipping method
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_156:
      required:
      - chat_id
      - currency
      - description
      - payload
      - prices
      - provider_token
      - start_parameter
      - title
      type: object
      properties:
        chat_id:
          type: integer
          description: Unique identifier for the target private chat
        title:
          type: string
          description: Product name, 1-32 characters
        description:
          type: string
          description: Product description, 1-255 characters
        payload:
          type: string
          description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
        provider_token:
          type: string
          description: Payments provider token, obtained via [Botfather](https://t.me/botfather)
        start_parameter:
          type: string
          description: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
        currency:
          type: string
          description: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
        prices:
          type: array
          description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
          items:
            $ref: '#/components/schemas/LabeledPrice'
        provider_data:
          type: string
          description: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
        photo_url:
          type: string
          description: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
        photo_size:
          type: integer
          description: Photo size
        photo_width:
          type: integer
          description: Photo width
        photo_height:
          type: integer
          description: Photo height
        need_name:
          type: boolean
          description: Pass *True*, if you require the user's full name to complete the order
        need_phone_number:
          type: boolean
          description: Pass *True*, if you require the user's phone number to complete the order
        need_email:
          type: boolean
          description: Pass *True*, if you require the user's email address to complete the order
        need_shipping_address:
          type: boolean
          description: Pass *True*, if you require the user's shipping address to complete the order
        send_phone_number_to_provider:
          type: boolean
          description: Pass *True*, if user's phone number should be sent to provider
        send_email_to_provider:
          type: boolean
          description: Pass *True*, if user's email address should be sent to provider
        is_flexible:
          type: boolean
          description: Pass *True*, if the final price depends on the shipping method
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_157:
      required:
      - ok
      - shipping_query_id
      type: object
      properties:
        shipping_query_id:
          type: string
          description: Unique identifier for the query to be answered
        ok:
          type: boolean
          description: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
        shipping_options:
          type: array
          description: Required if *ok* is True. A JSON-serialized array of available shipping options.
          items:
            $ref: '#/components/schemas/ShippingOption'
        error_message:
          type: string
          description: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
    body_158:
      required:
      - ok
      - shipping_query_id
      type: object
      properties:
        shipping_query_id:
          type: string
          description: Unique identifier for the query to be answered
        ok:
          type: boolean
          description: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
        shipping_options:
          type: array
          description: Required if *ok* is True. A JSON-serialized array of available shipping options.
          items:
            $ref: '#/components/schemas/ShippingOption'
        error_message:
          type: string
          description: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
    body_159:
      required:
      - ok
      - shipping_query_id
      type: object
      properties:
        shipping_query_id:
          type: string
          description: Unique identifier for the query to be answered
        ok:
          type: boolean
          description: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
        shipping_options:
          type: array
          description: Required if *ok* is True. A JSON-serialized array of available shipping options.
          items:
            $ref: '#/components/schemas/ShippingOption'
        error_message:
          type: string
          description: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
    body_160:
      required:
      - ok
      - pre_checkout_query_id
      type: object
      properties:
        pre_checkout_query_id:
          type: string
          description: Unique identifier for the query to be answered
        ok:
          type: boolean
          description: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
        error_message:
          type: string
          description: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
    body_161:
      required:
      - ok
      - pre_checkout_query_id
      type: object
      properties:
        pre_checkout_query_id:
          type: string
          description: Unique identifier for the query to be answered
        ok:
          type: boolean
          description: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
        error_message:
          type: string
          description: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
    body_162:
      required:
      - ok
      - pre_checkout_query_id
      type: object
      properties:
        pre_checkout_query_id:
          type: string
          description: Unique identifier for the query to be answered
        ok:
          type: boolean
          description: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
        error_message:
          type: string
          description: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
    body_163:
      required:
      - errors
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier
        errors:
          type: array
          description: A JSON-serialized array describing the errors
          items:
            $ref: '#/components/schemas/PassportElementError'
    body_164:
      required:
      - errors
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier
        errors:
          type: array
          description: A JSON-serialized array describing the errors
          items:
            $ref: '#/components/schemas/PassportElementError'
    body_165:
      required:
      - errors
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier
        errors:
          type: array
          description: A JSON-serialized array describing the errors
          items:
            $ref: '#/components/schemas/PassportElementError'
    body_166:
      required:
      - chat_id
      - game_short_name
      type: object
      properties:
        chat_id:
          type: integer
          description: Unique identifier for the target chat
        game_short_name:
          type: string
          description: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_167:
      required:
      - chat_id
      - game_short_name
      type: object
      properties:
        chat_id:
          type: integer
          description: Unique identifier for the target chat
        game_short_name:
          type: string
          description: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_168:
      required:
      - chat_id
      - game_short_name
      type: object
      properties:
        chat_id:
          type: integer
          description: Unique identifier for the target chat
        game_short_name:
          type: string
          description: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
        disable_notification:
          type: boolean
          description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
        reply_to_message_id:
          type: integer
          description: If the message is a reply, ID of the original message
        allow_sending_without_reply:
          type: boolean
          description: Pass *True*, if the message should be sent even if the specified replied-to message is not found
        reply_markup:
          $ref: '#/components/schemas/InlineKeyboardMarkup'
    body_169:
      required:
      - score
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier
        score:
          type: integer
          description: New score, must be non-negative
        force:
          type: boolean
          description: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
        disable_edit_message:
          type: boolean
          description: Pass True, if the game message should not be automatically edited to include the current scoreboard
        chat_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the sent message
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
    body_170:
      required:
      - score
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier
        score:
          type: integer
          description: New score, must be non-negative
        force:
          type: boolean
          description: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
        disable_edit_message:
          type: boolean
          description: Pass True, if the game message should not be automatically edited to include the current scoreboard
        chat_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the sent message
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
    body_171:
      required:
      - score
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier
        score:
          type: integer
          description: New score, must be non-negative
        force:
          type: boolean
          description: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
        disable_edit_message:
          type: boolean
          description: Pass True, if the game message should not be automatically edited to include the current scoreboard
        chat_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the sent message
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
    body_172:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: Target user id
        chat_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the sent message
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
    body_173:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: Target user id
        chat_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the sent message
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
    body_174:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: Target user id
        chat_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
        message_id:
          type: integer
          description: Required if *inline\_message\_id* is not specified. Identifier of the sent message
        inline_message_id:
          type: string
          description: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
    inline_response_200_18:
      required:
      - ok
      - result
      type: object
      properties:
        ok:
          type: boolean
          default: true
        result:
          type: array
          items:
            $ref: '#/components/schemas/GameHighScore'
